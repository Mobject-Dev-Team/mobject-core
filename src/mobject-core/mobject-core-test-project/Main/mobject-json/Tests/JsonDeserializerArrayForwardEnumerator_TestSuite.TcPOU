<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="JsonDeserializerArrayForwardEnumerator_TestSuite" Id="{af2a6ac6-a4bc-46f3-846d-0a7ab67b0092}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK JsonDeserializerArrayForwardEnumerator_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestIsValidAtStart();
TestIsNotValidAfterParentReset();
TestMoveNextReturnsFalseAtTheEnd();
TestMoveNextReturnsTrueSingleItem();
TestMoveNextReturnsFalseWhenEmpty();
TestMoveNextReturnsTrueMultipleItems();
TestEnumerateThroughArrayOfInts();
TestEnumerateThroughArrayOfStrings();
TestEnumerateThroughArrayOfObjects();]]></ST>
    </Implementation>
    <Method Name="TestEnumerateThroughArrayOfInts" Id="{2995049a-f2aa-4f2a-9dcc-ace3609fdb70}">
      <Declaration><![CDATA[METHOD PRIVATE TestEnumerateThroughArrayOfInts
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerArrayForwardEnumerator;
    json : STRING := '[1, 2, 3]';
	out1, out2, out3 : INT;
	feedback1, feedback2, feedback3 : DeserializerFeedback;
	expected1 : INT := 1;
	expected2 : INT := 2;
	expected3 : INT := 3;
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestEnumerateThroughArrayOfInts');

jsonDeserializer.TryLoad(json);
enumerator := jsonDeserializer.GetArrayEnumerator();

enumerator.MoveNext();
enumerator.Current.TryGetInt(out1, feedback1);

enumerator.MoveNext();
enumerator.Current.TryGetInt(out2, feedback2);

enumerator.MoveNext();
enumerator.Current.TryGetInt(out3, feedback3);

enumerator.Dispose();

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected result'
);
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestEnumerateThroughArrayOfObjects" Id="{e2f52df7-05c1-459f-afa3-2256810c8c31}">
      <Declaration><![CDATA[METHOD PRIVATE TestEnumerateThroughArrayOfObjects
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerArrayForwardEnumerator;
    json : STRING := '[{"name":"hello"}, {"name":"world"}, {"name":"foobar"}]';
	out1, out2, out3 : STRING;
	feedback1, feedback2, feedback3 : DeserializerFeedback;
	expected1 : STRING := 'hello';
	expected2 : STRING := 'world';
	expected3 : STRING := 'foobar';
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestEnumerateThroughArrayOfObjects');

jsonDeserializer.TryLoad(json);
enumerator := jsonDeserializer.GetArrayEnumerator();

enumerator.MoveNext();
enumerator.Current.TryGetKeyString('name', out1, feedback1);

enumerator.MoveNext();
enumerator.Current.TryGetKeyString('name', out2, feedback2);

enumerator.MoveNext();
enumerator.Current.TryGetKeyString('name', out3, feedback3);

enumerator.Dispose();

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected result'
);
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestEnumerateThroughArrayOfStrings" Id="{1503d435-53d8-4d79-b196-d6b651e31f82}">
      <Declaration><![CDATA[METHOD PRIVATE TestEnumerateThroughArrayOfStrings
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerArrayForwardEnumerator;
    json : STRING := '["one", "two", "three"]';
	out1, out2, out3 : STRING;
	feedback1, feedback2, feedback3 : DeserializerFeedback;
	expected1 : STRING := 'one';
	expected2 : STRING := 'two';
	expected3 : STRING := 'three';
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestEnumerateThroughArrayOfStrings');

jsonDeserializer.TryLoad(json);
enumerator := jsonDeserializer.GetArrayEnumerator();

enumerator.MoveNext();
enumerator.Current.TryGetString(out1, feedback1);

enumerator.MoveNext();
enumerator.Current.TryGetString(out2, feedback2);

enumerator.MoveNext();
enumerator.Current.TryGetString(out3, feedback3);

enumerator.Dispose();

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected result'
);
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsNotValidAfterParentReset" Id="{08e7bf35-a23a-4241-a584-e184b881d0ad}">
      <Declaration><![CDATA[METHOD PRIVATE TestIsNotValidAfterParentReset
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerArrayForwardEnumerator;
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsNotValidAfterParentReset');

enumerator := jsonDeserializer.GetArrayEnumerator();

jsonDeserializer.Reset();
result := enumerator.IsValid;

enumerator.Dispose();

AssertFalse(
	Condition := result,
	Message := 'IsValid incorrectly returned true after parent was reset'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsValidAtStart" Id="{b1e6472f-123e-4b03-8421-2c2e1f6c76c3}">
      <Declaration><![CDATA[METHOD PRIVATE TestIsValidAtStart
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerArrayForwardEnumerator;
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsValidAtStart');

enumerator := jsonDeserializer.GetArrayEnumerator();

result := enumerator.IsValid;
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'IsValid returned false'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMoveNextReturnsFalseAtTheEnd" Id="{2614e6bf-8c94-4334-a824-eb71dc0c6dbd}">
      <Declaration><![CDATA[METHOD PRIVATE TestMoveNextReturnsFalseAtTheEnd
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerArrayForwardEnumerator;
    json : STRING := '[100]';
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsFalseAtTheEnd');

jsonDeserializer.TryLoad(json);
enumerator := jsonDeserializer.GetArrayEnumerator();

enumerator.MoveNext();
result := enumerator.MoveNext();

enumerator.Dispose();

AssertFalse(result,
    'MoveNext did not correctly signal the end of the enumeration');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMoveNextReturnsFalseWhenEmpty" Id="{cf210b2c-7fd5-4f1c-bdb0-1dabf1706afa}">
      <Declaration><![CDATA[METHOD PRIVATE TestMoveNextReturnsFalseWhenEmpty
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerArrayForwardEnumerator;
    json : STRING := '[]';
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsFalseWhenEmpty');

jsonDeserializer.TryLoad(json);
enumerator := jsonDeserializer.GetArrayEnumerator();

result := enumerator.MoveNext();

enumerator.Dispose();

AssertFalse(result,
    'MoveNext did not correctly signal an empty array');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMoveNextReturnsTrueMultipleItems" Id="{293c3442-b6fb-451e-9f85-75d95bd9a361}">
      <Declaration><![CDATA[METHOD PRIVATE TestMoveNextReturnsTrueMultipleItems
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerArrayForwardEnumerator;
    json : STRING := '[true, false, true]';
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsTrueMultipleItems');

jsonDeserializer.TryLoad(json);
enumerator := jsonDeserializer.GetArrayEnumerator();

enumerator.MoveNext();
result := enumerator.MoveNext();

enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'MoveNext did not correctly signal there were more items to follow'
);
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMoveNextReturnsTrueSingleItem" Id="{205beabc-2058-46ca-9de8-6ce6c52aa476}">
      <Declaration><![CDATA[METHOD PRIVATE TestMoveNextReturnsTrueSingleItem
VAR
	jsonDeserializer : JsonDeserializer;
	enumerator : I_DeserializerArrayForwardEnumerator;
    json : STRING := '[100]';
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsTrueSingleItem');

jsonDeserializer.TryLoad(json);
enumerator := jsonDeserializer.GetArrayEnumerator();

result := enumerator.MoveNext();

enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'MoveNext did not correctly signal there were more items to follow, i.e. the first item'
);
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>