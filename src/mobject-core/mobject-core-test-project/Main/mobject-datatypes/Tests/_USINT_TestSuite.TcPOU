<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_USINT_TestSuite" Id="{0a905d0f-6eca-073c-391f-679cfb4d8cfb}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _USINT_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestIsFloat();
TestIsSigned();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{07c2a640-c757-0013-0f97-14da0245bb4b}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _USINT(0);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{2b8dbb7e-538d-0a50-3e18-113a9ebe7650}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _USINT(0);
	target : USINT := 0;
    expected : USINT := 0;
    actual : USINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := 123;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value incorrectly followed target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{23f4391c-3ab6-0edb-3545-e1cecfbf2e8b}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _USINT(123);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsFloat" Id="{ce04575b-40b2-43af-a661-63711d7b1558}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsFloat
VAR
    _type : _USINT(0);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsFloat');

AssertFalse(
	Condition := _type.IsFloat,
    Message := 'Type did not correctly identify itself as being unsigned'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsSigned" Id="{6c9f19de-3d3e-0d2c-2086-5371b14016bb}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsSigned
VAR
    _type : _USINT(0);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsSigned');

AssertFalse(
	Condition := _type.IsSigned,
    Message := 'Type did not correctly identify itself as being unsigned'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{61ee1ab0-ab9b-070c-0817-8002ebfc2003}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _USINT(0);
	target : USINT := 0;
    expected : USINT := 123;
    actual : USINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := 123;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{7094d21a-5007-0176-3f4a-b5bdda2a155c}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _USINT(0);
	target : USINT := 0;
    expected : USINT := 123;
    actual : USINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := 123;

actual := target;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{5edc4f18-734d-0af1-3e19-831c629e1113}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _USINT(0);
    serializer : JsonSerializer;
    expected : STRING(500) := '{"typeName":"USINT","minValue":0,"maxValue":255,"isSigned":false,"isFloat":false}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{e9dfeca3-3473-0467-2108-44d44727bc32}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _USINT(123);
    serializer : JsonSerializer;
    expected : STRING := '123';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{a9f27bc8-dabb-01e0-3629-a0864281afbb}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _USINT(0);
    expected : UDINT := SIZEOF(USINT);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{9176dc63-4772-01a5-3d31-7611f83bfcfc}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '123';
    _type : _USINT(0);
    expected : USINT := 123;
    actual : USINT;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{bdda264c-654b-0b80-3806-45612ad924ee}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _USINT(0);
	target : _USINT(0);
    expected : USINT := 123;
    actual : USINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := 123;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{b417e911-feb0-01f1-3339-75363b604eee}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _USINT(0);
	target : _USINT(0);
    expected : USINT := 123;
    actual : USINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := 123;

actual := target.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{02ca35af-b1ce-0c47-2b50-031dfc6ac75b}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _USINT(0);
    expected : STRING := 'USINT';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{3d89fc6d-4101-09f5-0186-286e51f67308}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _USINT(0);
    expected : USINT := 123;
    actual : USINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := 123;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{dc5ee612-9ca2-06fb-359c-400f881885ea}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _USINT(123);
    expected : USINT := 123;
    actual : USINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>