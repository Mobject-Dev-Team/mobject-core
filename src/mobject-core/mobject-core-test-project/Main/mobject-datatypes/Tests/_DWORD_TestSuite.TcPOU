<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_DWORD_TestSuite" Id="{8d04815b-1b99-0387-3b09-30162203f859}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _DWORD_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestIsFloat();
TestIsSigned();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{0f339911-26e6-06ce-3f71-454524a53bfb}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _DWORD(0);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{52eb6963-b579-0b4e-10b1-2646ab9063c5}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _DWORD(0);
	target : DWORD := 0;
    expected : DWORD := 0;
    actual : DWORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := 123;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value incorrectly followed target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{06c54d3e-d52d-05ae-2ca7-22b812a762f5}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _DWORD(123);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsFloat" Id="{f69040f7-e1a4-4c8c-b1dd-16423914b325}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsFloat
VAR
    _type : _DWORD(0);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsFloat');

AssertFalse(
	Condition := _type.IsFloat,
    Message := 'Type did not correctly identify itself as being unsigned'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsSigned" Id="{bf51736b-c602-004a-0cb3-d14ba7a5b770}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsSigned
VAR
    _type : _DWORD(0);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsSigned');

AssertFalse(
	Condition := _type.IsSigned,
    Message := 'Type did not correctly identify itself as being unsigned'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{721c6687-e813-05dd-39cf-9d11767c1b54}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _DWORD(0);
	target : DWORD := 0;
    expected : DWORD := 123;
    actual : DWORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := 123;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{dd7bdc84-5e71-090d-1f8f-4384fe35dabc}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _DWORD(0);
	target : DWORD := 0;
    expected : DWORD := 123;
    actual : DWORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := 123;

actual := target;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{1800faa4-5658-0e4c-2da7-683dd591a876}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _DWORD(0);
    serializer : JsonSerializer;
    expected : STRING(500) := '{"typeName":"DWORD","minValue":0,"maxValue":4294967295,"isSigned":false,"isFloat":false}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{c3b1553b-1a52-01df-2c5e-ae04c76df6c7}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _DWORD(65535);
    serializer : JsonSerializer;
    expected : STRING := '65535';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{48466685-e286-0ea6-1cff-f623d542c116}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _DWORD(0);
    expected : UDINT := SIZEOF(DWORD);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{736bc6a9-5f91-0bf1-2eaa-ac5c85f7b5d9}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '65535';
    _type : _DWORD(0);
    expected : DWORD := 65535;
    actual : DWORD;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{5428a1d4-18ed-087f-08e6-041bf5f1de2b}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _DWORD(0);
	target : _DWORD(0);
    expected : DWORD := 123;
    actual : DWORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := 123;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{dada9273-7785-0f05-0e09-fb24be422ec2}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _DWORD(0);
	target : _DWORD(0);
    expected : DWORD := 123;
    actual : DWORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := 123;

actual := target.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{f9e2043c-35e9-0df9-01fb-f4ef6f63068d}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _DWORD(0);
    expected : STRING := 'DWORD';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{0d139a1e-64f0-0be3-08b3-5202d7be4b93}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _DWORD(0);
    expected : DWORD := 65535;
    actual : DWORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := 65535;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{b34dce7f-c8ad-05c5-3912-46bb5ba904e4}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _DWORD(65535);
    expected : DWORD := 65535;
    actual : DWORD;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>