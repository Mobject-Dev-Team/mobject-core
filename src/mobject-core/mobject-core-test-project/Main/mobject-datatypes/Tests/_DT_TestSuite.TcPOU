<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_DT_TestSuite" Id="{b06d0dcf-43a6-0162-12d1-626a24e4e32d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _DT_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{aa05995f-f6a3-012b-008c-670e3290d438}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{f6eaa59e-2df1-0e0d-3fa7-ff534411c033}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
	target : DT := DT#1970-1-1-0:0:0;
    expected : DT := DT#1970-1-1-0:0:0;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := DT#2024-12-31-12:34:56;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value incorrectly followed target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{d5bb34b2-ff74-0819-0439-ecfad1ff5745}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _DT(DT#2024-12-31-12:34:56);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{682d8bce-fa28-0384-1c4c-32dac9c96d82}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
	target : DT := DT#1970-1-1-0:0:0;
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := DT#2024-12-31-12:34:56;

actual := _type.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{f9849a00-f9f9-0643-3f2c-a3b98ac41146}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
	target : DT := DT#1970-1-1-0:0:0;
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := DT#2024-12-31-12:34:56;

actual := target;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{f5ea3354-92f2-0dd5-19da-ca9a950285c4}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _DT(DT#2024-12-31-12:34:56);
    serializer : JsonSerializer;
    expected : STRING := '{"typeName":"DT"}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{ac030611-ad85-0cff-06fc-a560aaba7bd5}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _DT(DT#2024-12-31-12:34:56);
    serializer : JsonSerializer;
    expected : STRING := '"2024-12-31T12:34:56"';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{eec11be3-e633-07d8-3303-0eec78dc0ebb}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
    expected : UDINT := SIZEOF(DT);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{93f54ed6-13d2-0c5a-34df-9274451063a7}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '"2024-12-31T12:34:56"';
    _type : _DT(DT#1970-1-1-0:0:0);
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{54072fdf-097a-0289-1cfc-d4503f20f7a7}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
	target : _DT(DT#1970-1-1-0:0:0);
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := DT#2024-12-31-12:34:56;

actual := _type.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{0561a928-41ff-02c3-30f6-0f262e7da667}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
	target : _DT(DT#1970-1-1-0:0:0);
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := DT#2024-12-31-12:34:56;

actual := target.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{ea7774b2-c1f1-0a76-28d9-cfd88240ebbd}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _DT(DT#2024-12-31-12:34:56);
    expected : STRING := 'DT';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{700aa4bc-bec8-0033-3a43-c97853f68759}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _DT(DT#1970-1-1-0:0:0);
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := DT#2024-12-31-12:34:56;

actual := _type.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{97570211-3c62-0f7a-0043-f1f6062c535c}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _DT(DT#2024-12-31-12:34:56);
    expected : DT := DT#2024-12-31-12:34:56;
    actual : DT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals_DATE_AND_TIME(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>