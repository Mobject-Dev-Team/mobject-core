<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="_Array0to10OfBool" Id="{084de0ee-0e84-0aaf-3cb3-b947c642e7a9}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK _Array0to10OfBool EXTENDS ArrayDatatypeBase_1D
VAR CONSTANT
	lBound : DINT := 0;
	uBound : DINT := 10;
END_VAR
VAR
	localData : ARRAY [lBound..uBound] OF BOOL;
	activeData : REFERENCE TO ARRAY [lBound..uBound] OF BOOL REF= localData;
	elements : ARRAY [lBound..uBound] OF _BOOL(FALSE);
	baseType : _BOOL(FALSE);
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Core" Id="{a063dc9a-611c-0abc-1dd3-3c09fab90165}">
      <Folder Name="Constructor" Id="{bbf48b68-1e09-0832-2fdf-9751068f0343}" />
      <Folder Name="Protected" Id="{2e825aff-ad44-0212-3213-da0295dfa8f9}" />
    </Folder>
    <Folder Name="Customize" Id="{d061f3dc-1852-0624-0dca-659b7122186b}" />
    <Property Name="Address" Id="{dde30fa9-197c-0887-3803-52a777db66b1}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC Address : PVOID]]></Declaration>
      <Get Name="Get" Id="{2be625e1-ab1a-053a-13e8-5307ae9be0e9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := ADR(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="BaseDatatype" Id="{b928618f-cb42-080f-0dd6-b38c0196a724}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC BaseDatatype : I_Datatype]]></Declaration>
      <Get Name="Get" Id="{9472103a-df91-003f-1f43-a2c437209923}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[BaseDatatype := baseType;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearReference" Id="{3ac5cbd8-759f-08eb-357d-cec5f6359749}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC ClearReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= localData;
SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{dbf180e6-308e-0a5c-3f72-755ceffb1a20}" FolderPath="Customize\">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Datatype
VAR
    pClone : POINTER TO _Array0to10OfBool;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(_Array0to10OfBool());
pClone^.Value := Value;
Clone := pClone^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{48276e64-2e90-0d3d-3d6f-d9a7ed2e63ba}" FolderPath="Core\Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="MakeReferenceTo" Id="{cf0bb427-67cc-04aa-07ce-e644c789556f}" FolderPath="Customize\">
      <Declaration><![CDATA[METHOD PUBLIC MakeReferenceTo
VAR_INPUT
	ReferenceTarget : REFERENCE TO ARRAY [lBound..uBound] OF BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= ReferenceTarget;
SetElementReference();]]></ST>
      </Implementation>
    </Method>
    <Method Name="OnSerializeArrayValues" Id="{bdd693ab-ca65-009a-1a36-15bb01883f58}" FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED OnSerializeArrayValues
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := lBound TO uBound DO
	elements[i].SerializeWith(Serializer);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetElementReference" Id="{82bbe9be-c08c-04fc-1692-e60c7a171822}" FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SetElementReference
VAR_INPUT
END_VAR
VAR
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR i := lBound TO uBound DO
	elements[i].MakeReferenceTo(activeData[i]);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{0476cd93-1cc8-0f09-39c7-33d2cfa61eae}" FolderPath="Core\">
      <Declaration><![CDATA[PROPERTY PUBLIC Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{830c223f-fd2f-04c6-0455-c7659fff43de}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := SIZEOF(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryDeserializeArrayValues" Id="{7db51f6c-7cd6-0f27-1732-305427669a53}" FolderPath="Core\Protected\">
      <Declaration><![CDATA[METHOD PROTECTED TryDeserializeArrayValues : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	enumerator : I_DeserializerArrayForwardEnumerator;
	i : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[enumerator := Deserializer.GetArrayEnumerator();
i := lBound;

WHILE enumerator.MoveNext() AND i <= uBound DO
	
	IF NOT elements[i].TryDeserializeFrom(enumerator.Current, Feedback) THEN
		EXIT;
	END_IF
	i := i + 1;

END_WHILE
enumerator.Dispose();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetElementAsDatatypeByIndex" Id="{852af538-4909-04c1-1fb1-b4dbd6364dea}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetElementAsDatatypeByIndex : BOOL
VAR_INPUT
	Index : DINT;
	Destination : REFERENCE TO I_Datatype;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Index < lbound OR Index > ubound THEN
	RETURN;
END_IF

Destination := elements[Index];
TryGetElementAsDatatypeByIndex := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetLowerBound" Id="{6ae596a9-a44f-0418-019d-7d3f0d2a715c}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetLowerBound : BOOL
VAR_INPUT
	Dimention : UDINT;
	Destination : REFERENCE TO DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Dimention = 1 THEN
	Destination := lBound;
	TryGetLowerBound := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetUpperBound" Id="{7005dfed-e71b-033d-0b49-4f0badd02c5d}" FolderPath="Core\">
      <Declaration><![CDATA[METHOD PUBLIC TryGetUpperBound : BOOL
VAR_INPUT
	Dimention : UDINT;
	Destination : REFERENCE TO DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Dimention = 1 THEN
	Destination := uBound;
	TryGetUpperBound := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryMakeReferenceTo" Id="{e0c6fb27-a9e0-0754-0f43-ef653327eadf}" FolderPath="Customize\">
      <Declaration><![CDATA[METHOD TryMakeReferenceTo : BOOL
VAR_INPUT
	Target : I_Datatype;
END_VAR
VAR
	pTargetData : POINTER TO ARRAY [lBound..uBound] OF BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsEquivalentTo(Target) THEN
	RETURN;
END_IF

pTargetData := Target.Address;
activeData REF= pTargetData^;
SetElementReference();
TryMakeReferenceTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Value" Id="{7e7202a4-7d21-0917-0368-257b04b1fb03}" FolderPath="Customize\">
      <Declaration><![CDATA[PROPERTY PUBLIC Value : REFERENCE TO ARRAY [lBound..uBound] OF BOOL;]]></Declaration>
      <Get Name="Get" Id="{652ee707-ac90-0785-3aa7-5c6229b433a6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value ref= activeData;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>