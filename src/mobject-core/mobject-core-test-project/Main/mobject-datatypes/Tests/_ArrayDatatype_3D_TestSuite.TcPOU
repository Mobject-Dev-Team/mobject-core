<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="_ArrayDatatype_3D_TestSuite" Id="{547b0a7e-4cd0-0e1d-383d-dd0ee92f66a5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _ArrayDatatype_3D_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestBaseDatatype();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestIdentifierReturnsExpected();
TestLength();
TestLowerBoundD1();
TestLowerBoundD2();
TestLowerBoundD3();
TestLowerBoundWithInvalidDimention();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryGetElementAsDatatypeWithInvalidDimentionTooBig();
TestTryGetElementAsDatatypeWithInvalidDimentionTooSmall();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
TestUpperBoundD1();
TestUpperBoundD2();
TestUpperBoundD3();
TestUpperBoundWithInvalidDimention();
TestValueReturnsExpectedAfterChange();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{b9336392-4e07-000e-212a-119676415b4f}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestBaseDatatype" Id="{20e2ec4e-3746-02c3-1ccb-f227eac3a26a}">
      <Declaration><![CDATA[METHOD PUBLIC TestBaseDatatype
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    expected : T_MAXSTRING := 'BOOL';
    actual : T_MAXSTRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestBaseDatatype');

actual := _type.BaseDatatype.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return the correct base type'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{5221427a-36d7-02b2-18e7-b8fe16e1be06}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _Array0to1_0to2_0to3OfBool;
	target : ARRAY [0..1,0..2,0..3] OF BOOL;
	//                                           [0,0,0][0,0,1][0,0,2][0,0,3][0,1,0][0,1,1][0,1,2][0,1,3][0,2,0][0,2,1][0,2,2][0,2,3][1,0,0][1,0,1][1,0,2][1,0,3][1,1,0][1,1,1][1,1,2][1,1,3][1,2,0][1,2,1][1,2,2][1,2,3]
    expected : ARRAY [0..1,0..2,0..3] OF BOOL := [FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
    actual : ARRAY [0..1,0..2,0..3] OF BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target[0,0,0] := TRUE;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value incorrectly followed target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{09e1c0d6-7957-005b-2eab-cb0c91081641}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _Array0to1_0to2_0to3OfBool;
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIdentifierReturnsExpected" Id="{0f924f2b-bde3-010d-3f07-2890233d79e6}">
      <Declaration><![CDATA[METHOD PUBLIC TestIdentifierReturnsExpected
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    expected : STRING := 'ARRAY [0..1,0..2,0..3] OF BOOL';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIdentifierReturnsExpected');

actual := _type.Identifier;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestLength" Id="{f99e128e-ce6e-0c4c-20b8-8c31d7832017}">
      <Declaration><![CDATA[METHOD PUBLIC TestLength
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    expected : UDINT := 24;
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestLength');

actual := _type.Length;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct array length.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestLowerBoundD1" Id="{dba2cb28-5727-0ad3-1962-e707acf157a4}">
      <Declaration><![CDATA[METHOD PUBLIC TestLowerBoundD1
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    expected : DINT := 0;
    actual : DINT;
	ok : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestLowerBoundD1');

ok := _type.TryGetLowerBound(1, actual);

AssertTrue(
    Condition := ok,
    Message := 'Type did not indicate that lower bound was possible to retreive.'
);

AssertEquals_DINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct array lower bound.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestLowerBoundD2" Id="{1084bd36-2d8f-00b9-33dc-4401e2000beb}">
      <Declaration><![CDATA[METHOD PUBLIC TestLowerBoundD2
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    expected : DINT := 0;
    actual : DINT;
	ok : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestLowerBoundD2');

ok := _type.TryGetLowerBound(2, actual);

AssertTrue(
    Condition := ok,
    Message := 'Type did not indicate that lower bound was possible to retreive.'
);

AssertEquals_DINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct array lower bound.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestLowerBoundD3" Id="{adbe92b2-a6e1-09f8-0d92-4ae7d8cfb2a9}">
      <Declaration><![CDATA[METHOD PUBLIC TestLowerBoundD3
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    expected : DINT := 0;
    actual : DINT;
	ok : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestLowerBoundD3');

ok := _type.TryGetLowerBound(3, actual);

AssertTrue(
    Condition := ok,
    Message := 'Type did not indicate that lower bound was possible to retreive.'
);

AssertEquals_DINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct array lower bound.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestLowerBoundWithInvalidDimention" Id="{1914ea49-6a60-0cd8-2ca5-66d0f8197003}">
      <Declaration><![CDATA[METHOD PUBLIC TestLowerBoundWithInvalidDimention
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    actual : DINT;
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestLowerBoundWithInvalidDimention');

result := _type.TryGetLowerBound(-1, actual);

AssertFalse(
    Condition := result,
    Message := 'Type did not indicate that the dimention was invalid'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{b8992a4a-4de3-0855-2860-5255da667d34}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
	_type : _Array0to1_0to2_0to3OfBool;
	target : ARRAY [0..1,0..2,0..3] OF BOOL;
    //                                           [0,0,0][0,0,1][0,0,2][0,0,3][0,1,0][0,1,1][0,1,2][0,1,3][0,2,0][0,2,1][0,2,2][0,2,3][1,0,0][1,0,1][1,0,2][1,0,3][1,1,0][1,1,1][1,1,2][1,1,3][1,2,0][1,2,1][1,2,2][1,2,3]
    expected : ARRAY [0..1,0..2,0..3] OF BOOL := [TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
    actual : ARRAY [0..1,0..2,0..3] OF BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target[0,0,0] := TRUE;
target[0,1,0] := TRUE; 
target[1,0,3] := TRUE;
actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{5d50eb9f-399c-0c02-3de6-36ec2b4cbf8d}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
	_type : _Array0to1_0to2_0to3OfBool;
	target : ARRAY [0..1,0..2,0..3] OF BOOL;
    //                                           [0,0,0][0,0,1][0,0,2][0,0,3][0,1,0][0,1,1][0,1,2][0,1,3][0,2,0][0,2,1][0,2,2][0,2,3][1,0,0][1,0,1][1,0,2][1,0,3][1,1,0][1,1,1][1,1,2][1,1,3][1,2,0][1,2,1][1,2,2][1,2,3]
    expected : ARRAY [0..1,0..2,0..3] OF BOOL := [TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
    actual : ARRAY [0..1,0..2,0..3] OF BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value[0,0,0] := TRUE;
_type.Value[0,1,0] := TRUE; 
_type.Value[1,0,3] := TRUE;

actual := target;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{c60f247c-06fc-0e39-01f2-a5dfe9bf5055}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    serializer : JsonSerializer;
    expected : STRING(1000) := '{"typeName":"ARRAY","identifier":"ARRAY [0..1,0..2,0..3] OF BOOL","baseType":{"typeName":"BOOL"}}';
    actual : STRING(1000);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{8b6e6c07-3f8f-09a3-33d4-9257939e338c}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    serializer : JsonSerializer;
    expected : STRING(500) := '[[[true,false,false,false],[true,false,false,false],[false,false,false,false]],[[false,false,false,true],[false,false,false,false],[false,false,false,false]]]';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

_type.Value[0,0,0] := TRUE;
_type.Value[0,1,0] := TRUE; 
_type.Value[1,0,3] := TRUE;

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{35c2afc2-9f4b-0865-1305-ed2dda52bf1e}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _Array0to1_0to2_0to3OfBool;
	example : ARRAY [0..1,0..2,0..3] OF BOOL;
    expected : UDINT := SIZEOF(example);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{fcfdd373-a7e3-0176-032a-6a69dd3a8f69}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING(500) := '[[[true, false, false, false],[true, false, false, false],[false, false, false, false]],[[false, false, true, false],[false, false, false, false],[false, false, false, false]]]';
    _type : _Array0to1_0to2_0to3OfBool;
    //                                           [0,0,0][0,0,1][0,0,2][0,0,3][0,1,0][0,1,1][0,1,2][0,1,3][0,2,0][0,2,1][0,2,2][0,2,3][1,0,0][1,0,1][1,0,2][1,0,3][1,1,0][1,1,1][1,1,2][1,1,3][1,2,0][1,2,1][1,2,2][1,2,3]
    expected : ARRAY [0..1,0..2,0..3] OF BOOL := [TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
    actual : ARRAY [0..1,0..2,0..3] OF BOOL;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryGetElementAsDatatypeWithInvalidDimentionTooBig" Id="{ae1d9d4f-aa5f-0d13-0ac3-269ccbb83aef}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryGetElementAsDatatypeWithInvalidDimentionTooBig
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    actual : I_Datatype;
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryGetElementAsDatatypeWithInvalidDimentionTooBig');

result := _type.TryGetElementAsDatatypeByIndex(0,3,0, actual);

AssertFalse(
    Condition := result,
    Message := 'Type did not indicate that the dimention was invalid'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryGetElementAsDatatypeWithInvalidDimentionTooSmall" Id="{1ad2fd01-41ed-0dfd-153b-be4871b1d984}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryGetElementAsDatatypeWithInvalidDimentionTooSmall
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    actual : I_Datatype;
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryGetElementAsDatatypeWithInvalidDimentionTooSmall');

result := _type.TryGetElementAsDatatypeByIndex(-1, 0, 0, actual);

AssertFalse(
    Condition := result,
    Message := 'Type did not indicate that the dimention was invalid'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{866b1b2c-3593-0cdc-0e14-47ebb688638c}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _Array0to1_0to2_0to3OfBool;
	target : _Array0to1_0to2_0to3OfBool;
    //                                           [0,0,0][0,0,1][0,0,2][0,0,3][0,1,0][0,1,1][0,1,2][0,1,3][0,2,0][0,2,1][0,2,2][0,2,3][1,0,0][1,0,1][1,0,2][1,0,3][1,1,0][1,1,1][1,1,2][1,1,3][1,2,0][1,2,1][1,2,2][1,2,3]
    expected : ARRAY [0..1,0..2,0..3] OF BOOL := [TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
    actual :  ARRAY [0..1,0..2,0..3] OF BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value[0,0,0] := TRUE;
target.Value[0,1,0] := TRUE; 
target.Value[1,0,3] := TRUE;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{9ff2c395-70f0-05ad-227e-c6a80a2ceb5e}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _Array0to1_0to2_0to3OfBool;
	target : _Array0to1_0to2_0to3OfBool;
    //                                           [0,0,0][0,0,1][0,0,2][0,0,3][0,1,0][0,1,1][0,1,2][0,1,3][0,2,0][0,2,1][0,2,2][0,2,3][1,0,0][1,0,1][1,0,2][1,0,3][1,1,0][1,1,1][1,1,2][1,1,3][1,2,0][1,2,1][1,2,2][1,2,3]
    expected : ARRAY [0..1,0..2,0..3] OF BOOL := [TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
    actual : ARRAY [0..1,0..2,0..3] OF BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value[0,0,0] := TRUE;
_type.Value[0,1,0] := TRUE; 
_type.Value[1,0,3] := TRUE;

actual := target.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{b443cfd0-e072-0e0a-1230-c18df5600d48}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    expected : STRING := 'ARRAY';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestUpperBoundD1" Id="{324d92e8-d62e-02bf-2a3b-df14a299bb0f}">
      <Declaration><![CDATA[METHOD PUBLIC TestUpperBoundD1
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    expected : DINT := 1;
    actual : DINT;
	ok : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestUpperBoundD1');

ok := _type.TryGetUpperBound(1, actual);

AssertTrue(
    Condition := ok,
    Message := 'Type did not indicate that upper bound was possible to retreive.'
);

AssertEquals_DINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct array upper bound.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestUpperBoundD2" Id="{5db66627-c3fd-03ba-016f-271c98c7fab0}">
      <Declaration><![CDATA[METHOD PUBLIC TestUpperBoundD2
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    expected : DINT := 2;
    actual : DINT;
	ok : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestUpperBoundD2');

ok := _type.TryGetUpperBound(2, actual);

AssertTrue(
    Condition := ok,
    Message := 'Type did not indicate that upper bound was possible to retreive.'
);

AssertEquals_DINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct array upper bound.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestUpperBoundD3" Id="{032edad3-d677-083b-0773-8f9fba7e6da5}">
      <Declaration><![CDATA[METHOD PUBLIC TestUpperBoundD3
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    expected : DINT := 3;
    actual : DINT;
	ok : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestUpperBoundD3');

ok := _type.TryGetUpperBound(3, actual);

AssertTrue(
    Condition := ok,
    Message := 'Type did not indicate that upper bound was possible to retreive.'
);

AssertEquals_DINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct array upper bound.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestUpperBoundWithInvalidDimention" Id="{236c92c6-0c7e-046c-29c4-429988a6bcef}">
      <Declaration><![CDATA[METHOD PUBLIC TestUpperBoundWithInvalidDimention
VAR
    _type : _Array0to1_0to2_0to3OfBool;
    actual : DINT;
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestUpperBoundWithInvalidDimention');

result := _type.TryGetUpperBound(4, actual);

AssertFalse(
    Condition := result,
    Message := 'Type did not indicate that the dimention was invalid'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{15b5eccb-8fe3-0816-0d4c-f5b92d6edd3a}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _Array0to1_0to2_0to3OfBool;
	//                                           [0,0,0][0,0,1][0,0,2][0,0,3][0,1,0][0,1,1][0,1,2][0,1,3][0,2,0][0,2,1][0,2,2][0,2,3][1,0,0][1,0,1][1,0,2][1,0,3][1,1,0][1,1,1][1,1,2][1,1,3][1,2,0][1,2,1][1,2,2][1,2,3]
    value : ARRAY [0..1,0..2,0..3] OF BOOL := [TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
    //                                           [0,0,0][0,0,1][0,0,2][0,0,3][0,1,0][0,1,1][0,1,2][0,1,3][0,2,0][0,2,1][0,2,2][0,2,3][1,0,0][1,0,1][1,0,2][1,0,3][1,1,0][1,1,1][1,1,2][1,1,3][1,2,0][1,2,1][1,2,2][1,2,3]
    expected : ARRAY [0..1,0..2,0..3] OF BOOL := [TRUE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE];
    actual : ARRAY [0..1,0..2,0..3] OF BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := value;
actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>