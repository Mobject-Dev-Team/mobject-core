<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Stack_TestSuite" Id="{9dbf4f06-6539-04e5-3f52-5a75244f1d20}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC Stack_TestSuite EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[// check datatypes are handled correctly
CheckListWorksWithIntegers();
CheckListWorksWithStrings();
CheckListWorksWithArrays();

// all other checks
CheckStackImplementsI_Stack();
CheckContains();
CheckClear();
CheckCount();
CheckAddItem();
CheckTryRemoveItem();
CheckTryPopRemovesTheItem();
CheckTryPopReturnsTheCorrectValue();
CheckTryPeekReturnsTheCorrectValue();
CheckTryPeekDoesNotRemoveTheItem();
CheckOnChangedEvent();
CheckOnDisposedEvent();
CheckOnceEvent();
CheckOffEvent();
CheckTryCopyTo();
CheckTryCopyToLocation();
CheckStackOrderIsCorrect();
CheckListReturnsEnumerator();
CheckEnumeratorIsInvalidAfterChange();
CheckIsEmptyWhenEmpty();
CheckIsEmptyWhenFull();]]></ST>
    </Implementation>
    <Method Name="CheckAddItem" Id="{0c225a73-6890-059e-0c75-4b142e6dae4e}">
      <Declaration><![CDATA[METHOD PUBLIC CheckAddItem
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckAddItem');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123

// @TEST-RUN
stack.AddItem(in3); // fifo->) 789, 456, 123
result := stack.Contains(in3);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckClear" Id="{0d723c1e-6188-0cec-331a-5db0caeff5da}">
      <Declaration><![CDATA[METHOD PUBLIC CheckClear
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckClear');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in2); // (fifo->) 789, 456, 123

// @TEST-RUN
stack.Clear();

// @TEST-ASSSERT
AssertTrue(
	Condition := stack.Count = 0,
	Message := 'The count is not zero'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckContains" Id="{b380ae92-6a30-0128-2bbc-1cdd83e1af0f}">
      <Declaration><![CDATA[METHOD PUBLIC CheckContains
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckContains');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in2); // (fifo->) 789, 456, 123

// @TEST-RUN
result := stack.Contains(in2);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Did not find the item in the queue'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCount" Id="{0119e941-5835-02a1-38a7-79c495edaa64}">
      <Declaration><![CDATA[METHOD PUBLIC CheckCount
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	total : DINT;
	expected : DINT := 3;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckCount');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in2); // (fifo->) 789, 456, 123

// @TEST-RUN
total := stack.Count;

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := total,
	Message := 'Incorrect count'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckEnumeratorIsInvalidAfterChange" Id="{790c5363-bb15-07fc-1874-28607e4bc5a5}">
      <Declaration><![CDATA[METHOD PUBLIC CheckEnumeratorIsInvalidAfterChange
VAR
	in : INT := 123;
	result : BOOL;
	stack : Stack;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckEnumeratorIsInvalidAfterChange');

// @TEST-FIXTURE
enumerator := stack.GetEnumerator();
stack.Push(in);

// @TEST-RUN
result := enumerator.IsValid;
enumerator.Dispose();

// @TEST-ASSSERT
AssertFalse(
	Condition := result,
	Message := 'Method returned true'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckIsEmptyWhenEmpty" Id="{682f5ba2-963f-00b4-04fd-1a8648623bcb}">
      <Declaration><![CDATA[METHOD PUBLIC CheckIsEmptyWhenEmpty
VAR
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckIsEmptyWhenEmpty');

// @TEST-RUN
result := stack.IsEmpty;

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Incorrect state of IsEmpty'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckIsEmptyWhenFull" Id="{c7a3f79f-8258-03f2-251e-7402afbe2c0c}">
      <Declaration><![CDATA[METHOD PUBLIC CheckIsEmptyWhenFull
VAR
	in : INT := 123;
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckIsEmptyWhenFull');

// @TEST-FIXTURE
stack.Push(in);

// @TEST-RUN
result := stack.IsEmpty;

// @TEST-ASSSERT
AssertFalse(
	Condition := result,
	Message := 'Incorrect state of IsEmpty'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckListReturnsEnumerator" Id="{bef109da-5d23-06ca-0f5a-738f61da0191}">
      <Declaration><![CDATA[METHOD PUBLIC CheckListReturnsEnumerator
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	enumerator : I_ForwardEnumerator;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckListReturnsEnumerator');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in2); // (fifo->) 789, 456, 123

// @TEST-RUN
enumerator := stack.GetEnumerator();

// @TEST-ASSSERT
AssertTrue(
	Condition := (enumerator <> 0),
	Message := 'Did not return an enumerator'
);

// @TEST-DISPOSE
enumerator.Dispose();

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckListWorksWithArrays" Id="{3ecda962-d876-05da-2c1b-7a29cb2a77e8}">
      <Declaration><![CDATA[METHOD PUBLIC CheckListWorksWithArrays
VAR
	in : ARRAY [0..1] OF REAL := [0.1,2.3];
	out : ARRAY [0..1] OF REAL;
	expected : ARRAY [0..1] OF REAL := [0.1,2.3];
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckListWorksWithArrays');

// @TEST-FIXTURE
stack.Push(in);

// @TEST-RUN
result := stack.TryPop(out);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckListWorksWithIntegers" Id="{2a9f2f89-6cd0-0b26-14ac-95f23d56a93a}">
      <Declaration><![CDATA[METHOD PUBLIC CheckListWorksWithIntegers
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckListWorksWithIntegers');

// @TEST-FIXTURE
stack.Push(in);

// @TEST-RUN
result := stack.TryPop(out);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckListWorksWithStrings" Id="{71910fb0-2458-009b-070c-c6cccc9da0b1}">
      <Declaration><![CDATA[METHOD PUBLIC CheckListWorksWithStrings
VAR
	in : STRING := 'test';
	out : STRING;
	expected : STRING := 'test';
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckListWorksWithStrings');

// @TEST-FIXTURE
stack.Push(in);

// @TEST-RUN
result := stack.TryPop(out);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckOffEvent" Id="{c3149b0e-ac70-0549-303a-94b47d69f0c9}">
      <Declaration><![CDATA[METHOD PUBLIC CheckOffEvent
VAR
	value : INT := 123;
	stack : Stack;
	handler : CollectionChangedEventHandler(ExpectedOriginator := stack);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckOffEvent');

// @TEST-FIXTURE
stack.OnEvent('OnChanged',handler);
stack.OffEvent('OnChanged',handler);

// @TEST-RUN
stack.Push(value);

// @TEST-ASSSERT
AssertFalse(
	Condition := handler.EventReceived,
	Message := 'OnceEvent emitted the OnChanged event more than once'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckOnceEvent" Id="{3c4abbe9-bc0b-07d4-1ce7-2a6285c9eea1}">
      <Declaration><![CDATA[METHOD PUBLIC CheckOnceEvent
VAR
	value : INT := 123;
	stack : Stack;
	handler : CollectionChangedEventHandler(ExpectedOriginator := stack);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckOnceEvent');

// @TEST-FIXTURE
stack.OnceEvent('OnChanged',handler);
stack.Push(value);
handler.Reset();

// @TEST-RUN
stack.Push(value);

// @TEST-ASSSERT
AssertFalse(
	Condition := handler.EventReceived,
	Message := 'OnceEvent emitted the OnChanged event more than once'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckOnChangedEvent" Id="{a7979e55-184e-04ab-1287-c70904eea79c}">
      <Declaration><![CDATA[METHOD PUBLIC CheckOnChangedEvent
VAR
	value : INT := 123;
	stack : Stack;
	handler : CollectionChangedEventHandler(ExpectedOriginator := stack);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckOnChangedEvent');

// @TEST-FIXTURE
stack.OnEvent('OnChanged',handler);

// @TEST-RUN
stack.Push(value);

// @TEST-ASSSERT
AssertTrue(
	Condition := handler.EventReceived,
	Message := 'Did not emit the OnChanged event'
);

AssertTrue(
	Condition := handler.FromExpectedOriginator,
	Message := 'Did not include itself in the OnChanged event'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckOnDisposedEvent" Id="{5746d294-46f5-0e80-3027-be6059f528e0}">
      <Declaration><![CDATA[METHOD PUBLIC CheckOnDisposedEvent
VAR
	value : INT := 123;
	pStack : POINTER TO Stack;
	handler : CollectionDisposedEventHandler(ExpectedOriginator := 0);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckOnDisposedEvent');

// @TEST-FIXTURE
pStack := __NEW(Stack);
handler.SetExpectedOriginator(pStack^);
pStack^.OnEvent('OnDisposed',handler);

// @TEST-RUN
pStack^.Dispose();

// @TEST-ASSSERT
AssertTrue(
	Condition := handler.EventReceived,
	Message := 'Did not emit the OnDisposed event'
);

AssertTrue(
	Condition := handler.FromExpectedOriginator,
	Message := 'Did not include itself in the OnDisposed event'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckStackImplementsI_Stack" Id="{2275f7df-e043-0fa9-306f-73896f9b5034}">
      <Declaration><![CDATA[METHOD PUBLIC CheckStackImplementsI_Stack
VAR
	stack : Stack;
    iStack : I_Stack := stack;
    result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckStackImplementsI_Stack');

// @TEST-FIXTURE

// @TEST-RUN
result := iStack <> 0;

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Did not implement I_Stack'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckStackOrderIsCorrect" Id="{f73b8b5d-c287-0297-31b2-b556fa5c31ef}">
      <Declaration><![CDATA[METHOD PUBLIC CheckStackOrderIsCorrect
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out1, out2, out3 : INT;
	expected1 : INT := 789;
	expected2 : INT := 456;
	expected3 : INT := 123;
	result1, result2, result3 : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckStackOrderIsCorrect');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in3); // (fifo->) 789, 456, 123

// @TEST-RUN
result1 := stack.TryPop(out1);
result2 := stack.TryPop(out2);
result3 := stack.TryPop(out3);

// @TEST-ASSSERT
AssertTrue(
	Condition := result1 AND result2 AND result3,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryCopyTo" Id="{22d4b6f8-d268-01dc-353b-360e3adaa733}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryCopyTo
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : ARRAY [0..2] OF INT;
	expected : ARRAY [0..2] OF INT := [789,456,123];
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryCopyTo');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in3); // (fifo->) 789, 456, 123

// @TEST-RUN
stack.TryCopyTo(out);

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryCopyToLocation" Id="{b915a569-af89-0dc3-04e1-53956a2f3818}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryCopyToLocation
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : ARRAY [0..2] OF INT;
	expected : ARRAY [0..2] OF INT := [789,456,123];
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryCopyToLocation');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in3); // (fifo->) 789, 456, 123

// @TEST-RUN
stack.TryCopyToLocation(ADR(out),SIZEOF(out));

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryPeekDoesNotRemoveTheItem" Id="{b85f914b-6ffb-0a59-030c-e05f89dc7b41}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryPeekDoesNotRemoveTheItem
VAR
	in : INT := 123;
	out : INT;
	total : DINT;
	expected : DINT := 1;
	stack : Stack;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryPeekDoesNotRemoveTheItem');

// @TEST-FIXTURE
stack.Push(in); // (fifo->) 123

// @TEST-RUN
stack.TryPeek(out);
total := stack.Count;

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := total,
	Message := 'Incorrect count'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryPeekReturnsTheCorrectValue" Id="{98eb5a0d-121d-0840-2cab-76b11f8d8778}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryPeekReturnsTheCorrectValue
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryPeekReturnsTheCorrectValue');

// @TEST-FIXTURE
stack.Push(in); // (fifo->) 123

// @TEST-RUN
result := stack.TryPeek(out);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryPopRemovesTheItem" Id="{81bde934-ee9b-005d-09cb-1afdbdc0343e}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryPopRemovesTheItem
VAR
	in : INT := 123;
	out : INT;
	total : DINT;
	expected : DINT := 0;
	stack : Stack;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryPopRemovesTheItem');

// @TEST-FIXTURE
stack.Push(in); // (fifo->) 123

// @TEST-RUN
stack.TryPop(out);
total := stack.Count;

// @TEST-ASSSERT
AssertEquals(
	Expected := expected,
	Actual := total,
	Message := 'Incorrect count'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryPopReturnsTheCorrectValue" Id="{b0c9f180-26f2-021d-0db6-8133a8a9a7d7}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryPopReturnsTheCorrectValue
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryDequeueReturnsTheCorrectValue');

// @TEST-FIXTURE
stack.Push(in); // (fifo->) 123

// @TEST-RUN
result := stack.TryPop(out);

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryRemoveItem" Id="{4f3da353-d4f5-0ce0-19c0-db8719a76e30}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryRemoveItem
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	stack : Stack;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryRemoveItem');

// @TEST-FIXTURE
stack.Push(in1); // (fifo->) 123
stack.Push(in2); // (fifo->) 456, 123
stack.Push(in3); // (fifo->) 789, 456, 123

// @TEST-RUN
stack.TryRemoveItem(in2); // (lifo->) 789, 123
result := stack.Contains(in2);

// @TEST-ASSSERT
AssertFalse(
	Condition := result,
	Message := 'Method returned true'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>