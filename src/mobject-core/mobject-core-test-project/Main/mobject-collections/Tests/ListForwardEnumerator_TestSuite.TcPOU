<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="ListForwardEnumerator_TestSuite" Id="{ccde4ca8-5c0c-094e-3a18-38138e0e9d90}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ListForwardEnumerator_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CheckIsValidAtStart();
CheckMoveNextReturnsFalseAtTheEnd();
CheckMoveNextReturnsTrueSingleItem();
CheckMoveNextReturnsFalseWhenEmpty();
CheckMoveNextReturnsTrueMultipleItems();
CheckReset();
CheckTryGet();
CheckTryGetTo();
CheckWorksWithArrays();
CheckWorksWithIntegers();
CheckWorksWithStrings();]]></ST>
    </Implementation>
    <Method Name="CheckIsValidAtStart" Id="{c58e7561-7d8b-06f5-05e1-1d35afaff6e7}">
      <Declaration><![CDATA[METHOD PRIVATE CheckIsValidAtStart
VAR
	result : BOOL;
	store : List;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckIsValidAtStart');

enumerator := store.GetEnumerator();

result := enumerator.IsValid;
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'IsValid returned false'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsFalseAtTheEnd" Id="{eae00d6b-0013-0fc3-1699-96c7f2e7866d}">
      <Declaration><![CDATA[METHOD PRIVATE CheckMoveNextReturnsFalseAtTheEnd
VAR
	in1 : INT := 123;
	result : BOOL;
	store : List;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsFalseAtTheEnd');

store.AddItem(in1);
enumerator := store.GetEnumerator();

enumerator.MoveNext();
result := enumerator.MoveNext();
enumerator.Dispose();

AssertFalse(result,
    'MoveNext did not correctly signal the end of the enumeration');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsFalseWhenEmpty" Id="{54714021-0124-04c3-1532-1ea4496ac7a3}">
      <Declaration><![CDATA[METHOD PRIVATE CheckMoveNextReturnsFalseWhenEmpty
VAR
	result : BOOL;
	store : List;
	enumerator : I_ForwardEnumerator;
	count : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsFalseWhenEmpty');

count := store.Count;
enumerator := store.GetEnumerator();

result := enumerator.MoveNext();
enumerator.Dispose();

AssertFalse(Condition := result,
    Message := 'MoveNext did not correctly signal the end of the enumeration');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsTrueMultipleItems" Id="{22a415b1-ff8b-0f68-1dc9-1ebf46c050b2}">
      <Declaration><![CDATA[METHOD PRIVATE CheckMoveNextReturnsTrueMultipleItems
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	store : List;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsTrueMultipleItems');

store.AddItem(in1);
store.AddItem(in2);
store.AddItem(in3);
enumerator := store.GetEnumerator();

result := enumerator.MoveNext();
enumerator.Dispose();

AssertTrue(result, 'MoveNext did not correctly signal there were more items to follow');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsTrueSingleItem" Id="{279e7036-38a0-0076-01a8-2eda19a9cfab}">
      <Declaration><![CDATA[METHOD PRIVATE CheckMoveNextReturnsTrueSingleItem
VAR
	in1 : INT := 123;
	result : BOOL;
	store : List;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsTrueSingleItem');

store.AddItem(in1);
enumerator := store.GetEnumerator();

result := enumerator.MoveNext();
enumerator.Dispose();

AssertTrue(result,
    'MoveNext did not correctly signal there were more items to follow');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckReset" Id="{0b320028-7fcb-0ff0-1e13-f6576b2feb7c}">
      <Declaration><![CDATA[METHOD PRIVATE CheckReset
VAR
	in1 : ARRAY [0..1] OF REAL := [0.1,2.3];
	in2 : ARRAY [0..1] OF REAL := [1.2,3.4];
	in3 : ARRAY [0..1] OF REAL := [2.3,4.5];
	out : ARRAY [0..1] OF REAL;
	expected : ARRAY [0..1] OF REAL := [0.1,2.3];
	store : List;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckReset');

store.AddItem(in1);
store.AddItem(in2);
store.AddItem(in3);

enumerator := store.GetEnumerator();

enumerator.MoveNext();
enumerator.MoveNext();
enumerator.Reset();
enumerator.MoveNext();
enumerator.TryGet(out);

enumerator.Dispose();

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryGet" Id="{4f9547ab-9136-0a7c-0bb0-a8c6f23362c8}">
      <Declaration><![CDATA[METHOD PRIVATE CheckTryGet
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	store : List;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryGet');

store.AddItem(in);
enumerator := store.GetEnumerator();
enumerator.MoveNext();

result := enumerator.TryGet(out);
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryGetTo" Id="{1c6015ea-61f6-0af4-3fe3-b2f1c68fb771}">
      <Declaration><![CDATA[METHOD PRIVATE CheckTryGetTo
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	store : List;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryGetTo');

store.AddItem(in);
enumerator := store.GetEnumerator();
enumerator.MoveNext();

result := enumerator.TryGetTo(ADR(out),SIZEOF(out));
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithArrays" Id="{41136b75-4123-0fbd-0d1b-6e6409b146e1}">
      <Declaration><![CDATA[METHOD PRIVATE CheckWorksWithArrays
VAR
	in1 : ARRAY [0..1] OF REAL := [0.1,2.3];
	in2 : ARRAY [0..1] OF REAL := [1.2,3.4];
	in3 : ARRAY [0..1] OF REAL := [2.3,4.5];
	out1 : ARRAY [0..1] OF REAL;
	out2 : ARRAY [0..1] OF REAL;
	out3 : ARRAY [0..1] OF REAL;
	expected1 : ARRAY [0..1] OF REAL := [0.1,2.3];
	expected2 : ARRAY [0..1] OF REAL := [1.2,3.4];
	expected3 : ARRAY [0..1] OF REAL := [2.3,4.5];
	store : List;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithArrays');

store.AddItem(in1);
store.AddItem(in2);
store.AddItem(in3);

enumerator := store.GetEnumerator();

enumerator.MoveNext();
enumerator.TryGet(out1);
enumerator.MoveNext();
enumerator.TryGet(out2);
enumerator.MoveNext();
enumerator.TryGet(out3);

enumerator.Dispose();

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected 1st result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected 2nd result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected 3rd result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithIntegers" Id="{9662db01-3720-05e6-3c3d-b91ca7d98997}">
      <Declaration><![CDATA[METHOD PRIVATE CheckWorksWithIntegers
VAR
	in1 : INT := 123;
	in2 : INT := 234;
	in3 : INT := 345;
	out1 : INT;
	out2 : INT;
	out3 : INT;
	expected1 : INT := 123;
	expected2 : INT := 234;
	expected3 : INT := 345;
	store : List;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithIntegers');

store.AddItem(in1);
store.AddItem(in2);
store.AddItem(in3);

enumerator := store.GetEnumerator();

enumerator.MoveNext();
enumerator.TryGet(out1);
enumerator.MoveNext();
enumerator.TryGet(out2);
enumerator.MoveNext();
enumerator.TryGet(out3);

enumerator.Dispose();

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected 1st result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected 2nd result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected 3rd result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithStrings" Id="{8288b326-3899-0cf0-14b9-29b44323eb66}">
      <Declaration><![CDATA[METHOD PRIVATE CheckWorksWithStrings
VAR
	in1 : STRING := 'test1';
	in2 : STRING := 'test2';
	in3 : STRING := 'test3';
	out1 : STRING;
	out2 : STRING;
	out3 : STRING;
	expected1 : STRING := 'test1';
	expected2 : STRING := 'test2';
	expected3 : STRING := 'test3';
	store : List;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithStrings');

store.AddItem(in1);
store.AddItem(in2);
store.AddItem(in3);

enumerator := store.GetEnumerator();

enumerator.MoveNext();
enumerator.TryGet(out1);
enumerator.MoveNext();
enumerator.TryGet(out2);
enumerator.MoveNext();
enumerator.TryGet(out3);

enumerator.Dispose();

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected 1st result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected 2nd result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected 3rd result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>