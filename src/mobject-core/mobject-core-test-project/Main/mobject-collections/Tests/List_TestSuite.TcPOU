<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="List_TestSuite" Id="{d5189bdc-1d9e-097e-2725-ab870041a6bb}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK List_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CheckAddItem();
CheckCapacityAfterAdding1Item();
CheckCapacityAfterAdding5Items();
CheckCapacityAfterAdding5ItemsTrimThen1Item();
CheckCapacityAtStart();
CheckClear();
CheckContains();
CheckTryCopyTo();
CheckTryCopyToLocation();
CheckCount();
CheckGetByIndexInBounds();
CheckGetByIndexNoItems();
CheckGetByIndexOutOfBounds();
CheckGetEnumerator();
CheckGetIndexOfExistingItem();
CheckGetIndexOfNonExistingItem();
CheckImplementsICollection();
CheckImplementsIList();
CheckTryInsert();
CheckOnChangedEvent();
CheckOnDisposedEvent();
CheckOnceEvent();
CheckOffEvent();
CheckTryRemoveAtInBounds();
CheckTryRemoveAtNoItems();
CheckTryRemoveAtOutOfBounds();
CheckTryRemoveItemFirstShiftUp();
CheckTryRemoveItemNonExisting();
CheckTryRemoveItemSecondShiftUp();
CheckTrimExcessAfterAdding5Items();
CheckIsEmptyWhenEmpty();
CheckIsEmptyWhenFull();]]></ST>
    </Implementation>
    <Method Name="CheckAddItem" Id="{eef2bac2-53d9-043d-26ce-cb926f9ef8d4}">
      <Declaration><![CDATA[METHOD PRIVATE CheckAddItem
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	expected : INT := 789;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckAddItem');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]
list.AddItem(in3); // [123,456,789]

list.TryGetByIndex(2,out);

AssertEquals(expected, out, 'Did not produce the expected result');

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCapacityAfterAdding1Item" Id="{17fb86ac-d7f8-06ab-25a7-b49381fbedfc}">
      <Declaration><![CDATA[METHOD PRIVATE CheckCapacityAfterAdding1Item
VAR
	in1 : INT := 1;
	expected : DINT := 4;
	out : DINT;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckCapacityAfterAdding1Item');

list.AddItem(in1); // [1, null, null, null]

out := list.Capacity;

AssertEquals(expected, out, 'List was expected to double once 5 items were added');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCapacityAfterAdding5Items" Id="{7b7d7949-a76e-0e70-2ab9-26837a599675}">
      <Declaration><![CDATA[METHOD PRIVATE CheckCapacityAfterAdding5Items
VAR
	in1 : INT := 1;
	in2 : INT := 2;
	in3 : INT := 3;
	in4 : INT := 4;
	in5 : INT := 5;
	in6 : INT := 6;
	expected : DINT := 8;
	out : DINT;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckCapacityAfterAdding5Items');

list.AddItem(in1); // [1, null, null, null]
list.AddItem(in2); // [1, 2, null, null]
list.AddItem(in3); // [1, 2, 3, null]
list.AddItem(in4); // [1, 2, 3, 4]
list.AddItem(in5); // [1, 2, 3, 4, 5, null, null, null]

out := list.Capacity;

AssertEquals(expected, out, 'List was expected to double once 5 items were added');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCapacityAfterAdding5ItemsTrimThen1Item" Id="{2da6e091-4cda-0880-1a83-c67c7a6177ab}">
      <Declaration><![CDATA[METHOD PRIVATE CheckCapacityAfterAdding5ItemsTrimThen1Item
VAR
	in1 : INT := 1;
	in2 : INT := 2;
	in3 : INT := 3;
	in4 : INT := 4;
	in5 : INT := 5;
	in6 : INT := 6;
	expected : DINT := 10;
	out : DINT;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckCapacityAfterAdding5ItemsTrimThen1Item');

list.AddItem(in1); // [1, null, null, null]
list.AddItem(in2); // [1, 2, null, null]
list.AddItem(in3); // [1, 2, 3, null]
list.AddItem(in4); // [1, 2, 3, 4]
list.AddItem(in5); // [1, 2, 3, 4, 5, null, null, null]
list.TrimExcess(); // [1, 2, 3, 4, 5]
list.AddItem(in6); // [1, 2, 3, 4, 5, 6]

out := list.Capacity;

AssertEquals(expected, out, 'Incorrect capacity returned');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCapacityAtStart" Id="{6acf6bde-c3c3-0391-21ba-27e85f386407}">
      <Declaration><![CDATA[METHOD PRIVATE CheckCapacityAtStart
VAR
	expected : DINT := 0;
	out : DINT;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckCapacityAtStart');

out := list.Capacity;

AssertEquals(expected, out, 'List was expected to start with a capacity of 0');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckClear" Id="{c6bfb14e-f748-0bee-002b-63e884e092fc}">
      <Declaration><![CDATA[METHOD PRIVATE CheckClear
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	expected : INT := 789;
	out : INT;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckClear');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]

list.Clear(); // []
list.AddItem(in3); // [789]

list.TryGetByIndex(0,out);

AssertEquals(expected, out, 'Did not produce the expected result');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckContains" Id="{fc724ee1-6735-0f73-08e1-1989e03cac27}">
      <Declaration><![CDATA[METHOD PRIVATE CheckContains
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckContains');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]
list.AddItem(in3); // [123,456,789]

result := list.Contains(in2);

AssertTrue(result, 'Contains returned false while item should be in collection');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCount" Id="{5aba44a5-1dd7-08d4-2ce9-f92f8166cdbc}">
      <Declaration><![CDATA[METHOD PRIVATE CheckCount
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	expected : DINT := 3;
	out : DINT;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckCount');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]
list.AddItem(in3); // [123,456,789]

out := list.Count;

AssertEquals(expected, out, 'Did not prodocue the expected result');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckGetByIndexInBounds" Id="{503b7a21-a1e6-0612-2420-bb8cf55f1fd3}">
      <Declaration><![CDATA[METHOD PRIVATE CheckGetByIndexInBounds
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	expected : INT := 456;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckGetByIndexInBounds');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]
list.AddItem(in3); // [123,456,789]

result := list.TryGetByIndex(1, out);

AssertTRUE(result, 'Returned FALSE while the index is populated');

AssertEquals(expected, out, 'Retrieved different value than expected');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckGetByIndexNoItems" Id="{082e5f3a-6e6e-034f-023b-d4ee7baa6af7}">
      <Declaration><![CDATA[METHOD PRIVATE CheckGetByIndexNoItems
VAR
	out : INT;
	result : BOOL;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckGetByIndexNoItems');

result := list.TryGetByIndex(0, out);

AssertFalse(result, 'Returned TRUE while no items exist');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckGetByIndexOutOfBounds" Id="{1c9b9ab9-5d26-07ea-04a9-0d70d5982736}">
      <Declaration><![CDATA[METHOD PRIVATE CheckGetByIndexOutOfBounds
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckGetByIndexOutOfBounds_ReturnsFalse');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]
list.AddItem(in3); // [123,456,789]

result := list.TryGetByIndex(3, out);

AssertFalse(result, 'Returned TRUE while the index is not populated');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckGetEnumerator" Id="{69675098-d529-0825-38cb-d3da90319ec1}">
      <Declaration><![CDATA[METHOD PRIVATE CheckGetEnumerator
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	list : List;
	enumerator : I_ForwardEnumerator;
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckGetEnumerator');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]
list.AddItem(in3); // [123,456,789]

enumerator := list.GetEnumerator();

AssertTrue(
	Condition := (enumerator <> 0),
	Message := 'Did not return an enumerator'
);

enumerator.Dispose();

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckGetIndexOfExistingItem" Id="{00e5d3d0-2d26-05c4-188d-e7ef99055879}">
      <Declaration><![CDATA[METHOD PRIVATE CheckGetIndexOfExistingItem
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	expected : DINT := 1;
	result : DINT;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckGetIndexOfExistingItem');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]
list.AddItem(in3); // [123,456,789]

result := list.GetIndexOf(in2);

AssertEquals(result, expected, 'The index is not the expected index');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckGetIndexOfNonExistingItem" Id="{fe245ee6-8379-0229-3021-f5791a930d02}">
      <Declaration><![CDATA[METHOD PRIVATE CheckGetIndexOfNonExistingItem
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	expected : DINT := -1;
	result : DINT;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckGetIndexOfNonExistingItem');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]

result := list.GetIndexOf(in3);

AssertEquals(result, expected, 'The index is not -1 which indicates missing');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckImplementsICollection" Id="{1bb540d2-6259-0d4e-215e-333f18043add}">
      <Declaration><![CDATA[METHOD PRIVATE CheckImplementsICollection
VAR
	list : List;
    collection : I_Collection := list;
    result : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckImplementsICollection');

result := collection <> 0;

AssertTrue(result, 'Did not implement ICollection');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckImplementsIEnumerable" Id="{25d99ef9-2e93-0299-0195-5c1f01209fe7}">
      <Declaration><![CDATA[METHOD PRIVATE CheckImplementsIEnumerable
VAR
	list : List;
	enumerable : I_Enumerable := list;
	result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckImplementsIEnumerable');

result := enumerable <> 0;

AssertTrue(result, 'Did not implement IEnumerable');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckImplementsIList" Id="{165003c0-501d-0623-2571-059e74a5bcbd}">
      <Declaration><![CDATA[METHOD PRIVATE CheckImplementsIList
VAR
	list : List;
    iList : I_List := list;
    result : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('ListTests_CheckImplementsIList');

result := iList <> 0;

AssertTrue(Condition := result,
    Message := 'Did not implement IList');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckIsEmptyWhenEmpty" Id="{c6c651db-fd66-0b12-3ae3-e7dd0b4bdcf8}">
      <Declaration><![CDATA[METHOD PUBLIC CheckIsEmptyWhenEmpty
VAR
	result : BOOL;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckIsEmptyWhenEmpty');

// @TEST-RUN
result := list.IsEmpty;

// @TEST-ASSSERT
AssertTrue(
	Condition := result,
	Message := 'Incorrect state of IsEmpty'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckIsEmptyWhenFull" Id="{d7aa4213-43ce-0174-3b7b-d97075ee386c}">
      <Declaration><![CDATA[METHOD PUBLIC CheckIsEmptyWhenFull
VAR
	in : INT := 123;
	result : BOOL;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckIsEmptyWhenFull');

// @TEST-FIXTURE
list.AddItem(in);

// @TEST-RUN
result := list.IsEmpty;

// @TEST-ASSSERT
AssertFalse(
	Condition := result,
	Message := 'Incorrect state of IsEmpty'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckOffEvent" Id="{c05e7d05-09f3-0507-359d-b06f1ace5ae4}">
      <Declaration><![CDATA[METHOD PUBLIC CheckOffEvent
VAR
	value : INT := 123;
	list : List;
	handler : CollectionChangedEventHandler(ExpectedOriginator := list);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckOffEvent');

// @TEST-FIXTURE
list.OnEvent('OnChanged',handler);
list.OffEvent('OnChanged',handler);

// @TEST-RUN
list.AddItem(value);

// @TEST-ASSSERT
AssertFalse(
	Condition := handler.EventReceived,
	Message := 'OnceEvent emitted the OnChanged event more than once'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckOnceEvent" Id="{d8786f28-b389-0509-07c1-31a12ad74973}">
      <Declaration><![CDATA[METHOD PUBLIC CheckOnceEvent
VAR
	value : INT := 123;
	list : List;
	handler : CollectionChangedEventHandler(ExpectedOriginator := list);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckOnceEvent');

// @TEST-FIXTURE
list.OnceEvent('OnChanged',handler);
list.AddItem(value);
handler.Reset();

// @TEST-RUN
list.AddItem(value);

// @TEST-ASSSERT
AssertFalse(
	Condition := handler.EventReceived,
	Message := 'OnceEvent emitted the OnChanged event more than once'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckOnChangedEvent" Id="{7495e468-5efb-08d6-30bc-f1285adcaea7}">
      <Declaration><![CDATA[METHOD PUBLIC CheckOnChangedEvent
VAR
	value : INT := 123;
	list : List;
	handler : CollectionChangedEventHandler(ExpectedOriginator := list);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckOnChangedEvent');

// @TEST-FIXTURE
list.OnEvent('OnChanged',handler);

// @TEST-RUN
list.AddItem(value);

// @TEST-ASSSERT
AssertTrue(
	Condition := handler.EventReceived,
	Message := 'Did not emit the OnChanged event'
);

AssertTrue(
	Condition := handler.FromExpectedOriginator,
	Message := 'Did not include itself in the OnChanged event'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckOnDisposedEvent" Id="{4e868ff7-1e04-0eb7-1f13-46461b7b2c2d}">
      <Declaration><![CDATA[METHOD PUBLIC CheckOnDisposedEvent
VAR
	pList : POINTER TO List;
	handler : CollectionDisposedEventHandler(ExpectedOriginator := 0);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckOnDisposedEvent');

// @TEST-FIXTURE
pList := __NEW(List);
handler.SetExpectedOriginator(pList^);
pList^.OnEvent('OnDisposed',handler);

// @TEST-RUN
pList^.Dispose();

// @TEST-ASSSERT
AssertTrue(
	Condition := handler.EventReceived,
	Message := 'Did not emit the OnDisposed event'
);

AssertTrue(
	Condition := handler.FromExpectedOriginator,
	Message := 'Did not include itself in the OnDisposed event'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTrimExcessAfterAdding5Items" Id="{2d609376-03f0-081f-3e44-ad09272bd4ce}">
      <Declaration><![CDATA[METHOD PRIVATE CheckTrimExcessAfterAdding5Items
VAR
	in1 : INT := 1;
	in2 : INT := 2;
	in3 : INT := 3;
	in4 : INT := 4;
	in5 : INT := 5;
	in6 : INT := 6;
	expected : DINT := 5;
	out : DINT;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTrimExcessAfterAdding5Items');

list.AddItem(in1); // [1, null, null, null]
list.AddItem(in2); // [1, 2, null, null]
list.AddItem(in3); // [1, 2, 3, null]
list.AddItem(in4); // [1, 2, 3, 4]
list.AddItem(in5); // [1, 2, 3, 4, 5, null, null, null]
list.TrimExcess(); // [1, 2, 3, 4, 5]

out := list.Capacity;

AssertEquals(expected, out, 'List was expected to double once 5 items were added');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryCopyTo" Id="{0d7a6c05-42d4-0362-332c-3626c0880325}">
      <Declaration><![CDATA[METHOD PRIVATE CheckTryCopyTo
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : ARRAY [0..2] OF INT;
	expected : ARRAY [0..2] OF INT := [123,456,789];
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryCopyTo');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]
list.AddItem(in3); // [123,456,789]

list.TryCopyTo(out);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryCopyToLocation" Id="{834c8515-d094-0c93-05ab-b73253abb7e3}">
      <Declaration><![CDATA[METHOD PRIVATE CheckTryCopyToLocation
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : ARRAY [0..2] OF INT;
	expected : ARRAY [0..2] OF INT := [123,456,789];
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryCopyToLocation');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]
list.AddItem(in3); // [123,456,789]

list.TryCopyToLocation(ADR(out),SIZEOF(out));

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryInsert" Id="{fcfbce26-36a4-04d6-2b18-749876997237}">
      <Declaration><![CDATA[METHOD PRIVATE CheckTryInsert
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	expected : INT := 789;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryInsert');

list.AddItem(in1); // [123]
list.AddItem(in1); // [123,456]
list.TryInsert(1, in3); // [123,789,456]

list.TryGetByIndex(1,out);

AssertEquals(expected, out, 'Did not produce the expected result');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryRemoveAtInBounds" Id="{cc9fb926-920c-0739-1066-8a4bb7a013c3}">
      <Declaration><![CDATA[METHOD PRIVATE CheckTryRemoveAtInBounds
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryRemoveAtInBounds');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]
list.AddItem(in3); // [123,456,789]

list.TryRemoveAt(0);

result := list.TryGetByIndex(0, out);

AssertTrue(result, 'Couldnt get first item');
AssertEquals(in2, out, 'Array didnt shift up items');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryRemoveAtNoItems" Id="{e3d3f1be-9c07-04e4-371c-0a787e6995b9}">
      <Declaration><![CDATA[METHOD PRIVATE CheckTryRemoveAtNoItems
VAR
	out : INT;
	result : BOOL;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryRemoveAtNoItems');

result := list.TryRemoveAt(0);

AssertFalse(result, 'Returned true while there was nothing to remove');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryRemoveAtOutOfBounds" Id="{a9f46e30-e4a6-0c92-07b1-dc9c9a234c95}">
      <Declaration><![CDATA[METHOD PRIVATE CheckTryRemoveAtOutOfBounds
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryRemoveAtOutOfBounds');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]
list.AddItem(in3); // [123,456,789]

result := list.TryRemoveAt(3);

AssertFalse(result, 'Returned true while remove was out of bounds');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryRemoveItemFirstShiftUp" Id="{1f07c213-98d8-0e34-104e-5f8559c7a7f7}">
      <Declaration><![CDATA[METHOD PRIVATE CheckTryRemoveItemFirstShiftUp
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	expected : INT := 456;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryRemoveItemFirstShiftUp');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]
list.AddItem(in3); // [123,456,789]
list.TryRemoveItem(in1); // [456,789]

result := list.TryGetByIndex(0, out);

AssertTrue(result, 'Couldnt get first item');

AssertEquals(expected, out, 'Array didnt shift up items');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryRemoveItemNonExisting" Id="{4a7f5bf5-d5c1-045e-193a-16610f2b86ef}">
      <Declaration><![CDATA[METHOD PRIVATE CheckTryRemoveItemNonExisting
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryRemoveItemNonExisting');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]

result := list.TryRemoveItem(in3);

AssertFalse(result, 'RemoveItem returned true which should not happen when item does not exist');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryRemoveItemSecondShiftUp" Id="{14a17e1e-95b5-0f1c-107f-7bc7a5d6b4b0}">
      <Declaration><![CDATA[METHOD PRIVATE CheckTryRemoveItemSecondShiftUp
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	out : INT;
	result : BOOL;
	expected : INT := 789;
	list : List;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryRemoveItemSecondShiftUp');

list.AddItem(in1); // [123]
list.AddItem(in2); // [123,456]
list.AddItem(in3); // [123,456,789]
list.TryRemoveItem(in2); // [123,789]

result := list.TryGetByIndex(1, out);

AssertTrue(result, 'Coulndt get first item');
AssertEquals(expected, out, 'Array didnt shift up items');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>