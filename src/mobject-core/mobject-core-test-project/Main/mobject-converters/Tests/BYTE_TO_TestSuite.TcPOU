<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="BYTE_TO_TestSuite" Id="{f4aa2cbf-ce65-4064-a973-27f56da660b8}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC BYTE_TO_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[Check_BYTE_TO_BOOL_Max();
Check_BYTE_TO_BOOL_Min();
Check_BYTE_TO_BYTE_Max();
Check_BYTE_TO_BYTE_Min();
Check_BYTE_TO_WORD_Max();
Check_BYTE_TO_WORD_Min();
Check_BYTE_TO_DWORD_Max();
Check_BYTE_TO_DWORD_Min();
Check_BYTE_TO_LWORD_Max();
Check_BYTE_TO_LWORD_Min();
Check_BYTE_TO_SINT_Max();
Check_BYTE_TO_SINT_Min();
Check_BYTE_TO_SINT_TooHigh();
Check_BYTE_TO_INT_Max();
Check_BYTE_TO_INT_Min();
Check_BYTE_TO_DINT_Max();
Check_BYTE_TO_DINT_Min();
Check_BYTE_TO_LINT_Max();
Check_BYTE_TO_LINT_Min();
Check_BYTE_TO_USINT_Max();
Check_BYTE_TO_USINT_Min();
Check_BYTE_TO_UINT_Max();
Check_BYTE_TO_UINT_Min();
Check_BYTE_TO_UDINT_Max();
Check_BYTE_TO_UDINT_Min();
Check_BYTE_TO_ULINT_Max();
Check_BYTE_TO_ULINT_Min();
Check_BYTE_TO_REAL_Max();
Check_BYTE_TO_REAL_Min();
Check_BYTE_TO_LREAL_Max();
Check_BYTE_TO_LREAL_Min();
Check_BYTE_TO_TIME_Max();
Check_BYTE_TO_TIME_Min();
Check_BYTE_TO_TOD_Max();
Check_BYTE_TO_TOD_Min();
Check_BYTE_TO_DATE_Max();
Check_BYTE_TO_DATE_Min();
Check_BYTE_TO_DT_Max();
Check_BYTE_TO_DT_Min();
Check_BYTE_TO_STRING_Max();
Check_BYTE_TO_STRING_Min();]]></ST>
    </Implementation>
    <Method Name="Check_BYTE_TO_BOOL_Max" Id="{3c08b2f3-3d23-4beb-9330-4065a7ac4d56}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_BOOL_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : BOOL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_BOOL_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_BOOL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to BOOL correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to BOOL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_BOOL_Min" Id="{9ba4d989-83d0-47c3-bd2a-d47b47f2ffc7}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_BOOL_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : BOOL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_BOOL_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_BOOL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to BOOL correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to BOOL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_BYTE_Max" Id="{1669ac9c-125d-4940-8651-607f70676050}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_BYTE_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : BYTE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_BYTE_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = value;

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to BYTE correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to BYTE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_BYTE_Min" Id="{c14506ed-e905-4fe2-9f56-5e0b9b0cd42c}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_BYTE_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : BYTE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_BYTE_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = value;

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to BYTE correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to BYTE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DATE_Max" Id="{0bd275d4-2c4a-42d7-b397-cffe6270c517}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DATE_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : DATE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DATE_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DATE(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DATE correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DATE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DATE_Min" Id="{0528f9a7-9281-42c4-a0fb-91f2276d05d6}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DATE_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : DATE;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DATE_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DATE(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DATE correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DATE conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DINT_Max" Id="{88c3c64e-c988-4be3-8eb3-363981e92090}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DINT_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : DINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DINT_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DINT_Min" Id="{d22be5dd-0a46-44ca-8430-f757e482e379}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DINT_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : DINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DINT_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DT_Max" Id="{91a7c51b-c4bf-46ee-bff9-fff0c58e3aee}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DT_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : DT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DT_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DT_Min" Id="{b63a6b78-75bc-479e-ae34-bb045fead8a3}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DT_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : DT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DT_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DWORD_Max" Id="{0e6dc87f-d674-4365-b3e5-165dbcc1c55d}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DWORD_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : DWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DWORD_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_DWORD_Min" Id="{f9f90e5a-9eef-4e1e-8b01-3c2c854f6461}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_DWORD_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : DWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_DWORD_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_DWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to DWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to DWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_INT_Max" Id="{f1376193-5cea-4584-837f-0be377825095}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_INT_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : INT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_INT_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_INT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to INT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to INT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_INT_Min" Id="{b7a3f986-8870-4b23-927a-cca93d827e5b}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_INT_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : INT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_INT_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_INT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to INT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to INT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LINT_Max" Id="{46708eb7-b6a9-4253-a2db-e578c85d636b}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LINT_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : LINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LINT_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to LINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to LINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LINT_Min" Id="{e5825143-dd77-45f3-9542-92d280b4a3e4}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LINT_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : LINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LINT_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to LINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to LINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LREAL_Max" Id="{24053132-e637-4a54-be9b-ddd3e3873427}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LREAL_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : LREAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LREAL_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LREAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to LREAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to LREAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LREAL_Min" Id="{7d4ead60-f3e1-4955-ae3f-94f7eefbd5ae}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LREAL_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : LREAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LREAL_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LREAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to LREAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to LREAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LWORD_Max" Id="{8ffb99c3-02fc-4ba1-b2af-d45efd792458}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LWORD_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : LWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LWORD_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to LWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to LWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_LWORD_Min" Id="{696a0d8e-c995-456b-97a7-7e1e7ba123ce}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_LWORD_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : LWORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_LWORD_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_LWORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to LWORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to LWORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_REAL_Max" Id="{b41f98da-ee6b-4ac9-96cf-8754fb41211a}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_REAL_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : REAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_REAL_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_REAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to REAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to REAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_REAL_Min" Id="{51fb8d5c-3a66-4fb0-9b13-e361f87f84f9}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_REAL_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : REAL;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_REAL_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_REAL(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to REAL correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to REAL conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_SINT_Max" Id="{4141b8ad-c7c7-4cb2-87f7-fc4363459446}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_SINT_Max
VAR
	value : BYTE := DatatypeLimits.MAX_VALUE_OF_BYTE_WHICH_CAN_BE_HELD_IN_A_SINT;
	actual : SINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_SINT_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_SINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to SINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to SINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_SINT_Min" Id="{cb1f629c-7a8e-437d-b393-36b798c270a8}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_SINT_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : SINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_SINT_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_SINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to SINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to SINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_SINT_TooHigh" Id="{78a13df5-b575-4aef-b817-69e3d03c252d}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_SINT_TooHigh
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : SINT;
	converted : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_SINT_TooHigh');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);

// @TEST-ASSERT
AssertFalse(Condition := converted, Message := 'Did not report BYTE to SINT conversion was prevented');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_STRING_Max" Id="{2ad90aee-eb1c-44f1-aef6-8a36b691dcab}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_STRING_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : STRING;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_STRING_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_STRING(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to STRING correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to STRING conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_STRING_Min" Id="{0c309d4a-9caf-4510-a666-7545a9d749d4}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_STRING_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : STRING;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_STRING_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_STRING(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to STRING correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to STRING conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_TIME_Max" Id="{7fce607f-7a70-4987-af66-1cf8cda2753e}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_TIME_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : TIME;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_TIME_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_TIME(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to TIME correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to TIME conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_TIME_Min" Id="{fba49e60-59c1-45c1-802e-6c628c902cfd}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_TIME_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : TIME;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_TIME_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_TIME(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to TIME correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to TIME conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_TOD_Max" Id="{c9d888b1-95f3-4b8f-9a83-dc4a822b4fee}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_TOD_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : TOD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_TOD_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_TOD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to TOD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to TOD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_TOD_Min" Id="{b15d758b-1ac0-4be8-a7b3-6c9099646f87}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_TOD_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : TOD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_TOD_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_TOD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to TOD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to TOD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_UDINT_Max" Id="{6cd90e8c-d4d2-4c3d-aa81-796c4a229517}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_UDINT_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : UDINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_UDINT_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_UDINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to UDINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to UDINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_UDINT_Min" Id="{277fa294-4546-4366-804c-54f8acdce7fb}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_UDINT_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : UDINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_UDINT_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_UDINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to UDINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to UDINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_UINT_Max" Id="{aca535dd-9bdc-4be6-bc34-a5085523b844}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_UINT_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : UINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_UINT_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_UINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to UINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to UINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_UINT_Min" Id="{9ccf32b9-9feb-4a82-bcbc-ef87176c949a}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_UINT_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : UINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_UINT_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_UINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to UINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to UINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_ULINT_Max" Id="{7a059229-42bc-4616-a74d-8476347358e4}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_ULINT_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : ULINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_ULINT_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_ULINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to ULINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to ULINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_ULINT_Min" Id="{737ae101-b085-4fcb-b8db-b442cc1d73c7}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_ULINT_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : ULINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_ULINT_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_ULINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to ULINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to ULINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_USINT_Max" Id="{f24ff7ac-1604-4e2f-8eda-8aa340d0323e}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_USINT_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : USINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_USINT_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_USINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to USINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to USINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_USINT_Min" Id="{714f0a38-113d-43a0-851e-d76f404d2c52}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_USINT_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : USINT;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_USINT_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_USINT(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to USINT correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to USINT conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_WORD_Max" Id="{b591fe97-cabb-460e-8733-06399ee991b0}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_WORD_Max
VAR
	value : BYTE := DatatypeLimits.BYTE_MAX_VALUE;
	actual : WORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_WORD_Max');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_WORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to WORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to WORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Check_BYTE_TO_WORD_Min" Id="{aa07bcda-75d0-4955-9cef-dd9e9fbc1792}">
      <Declaration><![CDATA[METHOD PUBLIC Check_BYTE_TO_WORD_Min
VAR
	value : BYTE := DatatypeLimits.BYTE_MIN_VALUE;
	actual : WORD;
	converted : BOOL;
	equal : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Check_BYTE_TO_WORD_Min');

// @TEST-RUN
converted := TryConvert_BYTE_TO_Destination(value, actual);
equal := actual = BYTE_TO_WORD(value);

// @TEST-ASSERT
AssertTrue(Condition := equal, Message := 'Did not convert BYTE to WORD correctly');
AssertTrue(Condition := converted, Message := 'Did not report BYTE to WORD conversion was successful');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>