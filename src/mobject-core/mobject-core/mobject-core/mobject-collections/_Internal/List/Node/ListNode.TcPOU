<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="ListNode" Id="{93aff3e5-d86d-0eb6-0d8e-016cd0fdea02}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK PUBLIC ListNode EXTENDS Disposable IMPLEMENTS I_ListNode
VAR
	pBuffer : POINTER TO BYTE;
	bufferSize : UDINT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{1526a92e-19f1-0fe1-09d7-80d02393ef8d}" />
    <Folder Name="Destructor" Id="{8635e0ca-71df-09d6-2ada-cee05bc00bc5}" />
    <Folder Name="Private" Id="{3addb6b1-98c9-07b3-34b0-345460af3fa0}" />
    <Method Name="CopyBufferToDestination" Id="{aaf00d0e-1e7b-026b-0d7f-50f5d372c577}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CopyBufferToDestination
VAR_INPUT
	DestinationAddress : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[MEMCPY(DestinationAddress, pBuffer, bufferSize);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CopySourceToBuffer" Id="{9f681f1c-3ad2-0c44-1605-08c8b1585ce3}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CopySourceToBuffer
VAR_INPUT
	SourceAddress : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[MEMCPY(pBuffer, SourceAddress, bufferSize);]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateBuffer" Id="{781440e5-6ab8-04a3-3511-cb7474572f88}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE CreateBuffer
VAR_INPUT
	SizeInBytes : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bufferSize := SizeInBytes;
pBuffer := __NEW(BYTE, SizeInBytes);]]></ST>
      </Implementation>
    </Method>
    <Property Name="DataSize" Id="{c5ed3b8f-bc1e-0103-271c-cc1431f210db}">
      <Declaration><![CDATA[PROPERTY PUBLIC DataSize : UDINT
]]></Declaration>
      <Get Name="Get" Id="{c005743d-a85e-0126-0134-a309f0a75ec6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[DataSize := bufferSize;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="DestroyBuffer" Id="{d99d397b-4d70-01c7-0296-c4ab28a2f74e}" FolderPath="Private\">
      <Declaration><![CDATA[METHOD PRIVATE DestroyBuffer
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pBuffer = 0 THEN
	RETURN;
END_IF

__DELETE(pBuffer);
bufferSize := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Equals" Id="{9bedbc6e-acf9-0a32-2ec4-f48090c273a7}">
      <Declaration><![CDATA[METHOD PUBLIC Equals : BOOL
VAR_INPUT
	Symbol : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pBuffer = 0 THEN
	RETURN;
END_IF

IF bufferSize <> DINT_TO_UDINT(Symbol.diSize) THEN
	RETURN;
END_IF

Equals := memcmp(Symbol.pValue, pBuffer, bufferSize) = 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_exit" Id="{c53c1ac2-3017-0b39-0847-5e9d150a844f}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

DestroyBuffer();]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{c8894410-f0ce-05e1-1ee2-98fd8e57c229}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Source : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CreateBuffer(DINT_TO_UDINT(Source.diSize));
CopySourceToBuffer(Source.pValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGet" Id="{de5e3775-17a7-0c52-2901-d863a9097e33}">
      <Declaration><![CDATA[METHOD TryGet : BOOL
VAR_INPUT
	Destination	: ANY;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryGet := TryGetTo(Destination.pValue, DINT_TO_UDINT(Destination.diSize));]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetTo" Id="{664725f6-d390-0ae4-37fe-7203f4e7025e}">
      <Declaration><![CDATA[METHOD TryGetTo : BOOL
VAR_INPUT
	DestinationAddress : PVOID;
	DestinationSize : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pBuffer = 0 THEN
	RETURN;
END_IF

IF bufferSize <> DestinationSize THEN
	RETURN;
END_IF

CopyBufferToDestination(DestinationAddress);
TryGetTo := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>