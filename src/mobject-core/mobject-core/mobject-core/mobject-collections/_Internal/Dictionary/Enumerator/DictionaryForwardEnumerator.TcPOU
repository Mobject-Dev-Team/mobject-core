<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="DictionaryForwardEnumerator" Id="{7d782f98-dd0f-0aa9-31c9-5ab0b10a1480}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK DictionaryForwardEnumerator EXTENDS Disposable IMPLEMENTS I_KeyValueForwardEnumerator, I_EventHandler
VAR
	parent : I_Dictionary;
	nodes : I_Collection;
	collectionEnumerator : I_ForwardEnumerator;
	currentNode : I_DictionaryTreeNode;
	moveNextCalled : BOOL := FALSE;
	invalid : BOOL := FALSE; 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{9a40bb53-e881-0748-2ca2-cbf473f2c227}" />
    <Folder Name="Destructor" Id="{9c065419-3ff3-0b12-0548-16e80bde41ee}" />
    <Method Name="FB_exit" Id="{03765533-4041-05b7-2f64-ab8904e383c8}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

collectionEnumerator.Dispose();
nodes.Dispose();

IF parent = 0 THEN
	RETURN;
END_IF

parent.OffEvent('OnChanged',THIS^);
parent.OffEvent('OnDisposed',THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{7cf4c858-2b0f-0860-3796-565b30e02e7d}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Parent : I_Dictionary;
	Nodes : I_Collection;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Parent.OnEvent('OnChanged',THIS^);
Parent.OnEvent('OnDisposed',THIS^);
THIS^.parent := Parent;
THIS^.nodes := Nodes;
THIS^.collectionEnumerator := Nodes.GetEnumerator();]]></ST>
      </Implementation>
    </Method>
    <Method Name="HandleEvent" Id="{bd92b5d4-4ca4-076b-0cde-a30993a8cab3}">
      <Declaration><![CDATA[METHOD PUBLIC HandleEvent
VAR_INPUT
	Event : I_Event;
END_VAR
VAR
	changedEvent : I_KeyValueCollectionChangedEvent;
	disposedEvent : I_KeyValueCollectionDisposedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __QUERYINTERFACE(Event, changedEvent) THEN
	invalid := TRUE;
	currentNode := 0;
ELSIF __QUERYINTERFACE(Event, disposedEvent) THEN
	parent := 0;	
	Dispose();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsValid" Id="{3ec35d1c-505c-08a7-3ea1-58028a5ff202}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsValid : BOOL]]></Declaration>
      <Get Name="Get" Id="{100735a4-6dba-0699-1d6e-d514408411f6}">
        <Declaration><![CDATA[PUBLIC]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsValid := (not invalid and parent <> 0);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Key" Id="{fc2bf51e-bf97-0326-330e-a6b0a2a507f2}">
      <Declaration><![CDATA[PROPERTY PUBLIC Key : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{52075b40-b50d-008e-2341-1946777bacfe}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT IsValid THEN
	RETURN;
END_IF

IF currentNode = 0 THEN
	RETURN;
END_IF

Key := currentNode.Key;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MoveNext" Id="{dd0539bd-4e56-0bab-2312-00f01313e863}">
      <Declaration><![CDATA[METHOD PUBLIC MoveNext : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF invalid THEN
	RETURN;
END_IF

IF collectionEnumerator.MoveNext() THEN
	collectionEnumerator.TryGet(currentNode);
	MoveNext := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{0fbd4f6e-4914-0140-14ce-124a69c70856}">
      <Declaration><![CDATA[METHOD Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[moveNextCalled := FALSE;
collectionEnumerator.Reset();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGet" Id="{98b02a1a-b98d-0478-0558-7d33530553b9}">
      <Declaration><![CDATA[METHOD PUBLIC TryGet : BOOL;
VAR_INPUT
	Destination : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF currentNode <> 0 THEN
	TryGet := currentNode.TryGet(Destination);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetTo" Id="{9290582a-3a78-0b6b-1c1a-ee3704075f6a}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetTo : BOOL;
VAR_INPUT
	DestinationAddress : PVOID;
	DestinationSize : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF currentNode <> 0 THEN
	TryGetTo := currentNode.TryGetTo(DestinationAddress,DestinationSize);
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>