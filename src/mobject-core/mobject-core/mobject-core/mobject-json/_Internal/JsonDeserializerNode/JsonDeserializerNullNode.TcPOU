<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="JsonDeserializerNullNode" Id="{f17b6ce9-445c-44fb-9bc2-3a3ee492d9a8}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK JsonDeserializerNullNode EXTENDS Disposable IMPLEMENTS I_Deserializer
VAR
	parent : I_JsonDeserializer;
	errorFactory : DeserializationErrorFactory;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{fb8d628c-2cd2-4ae8-8725-65c5ea917152}" />
    <Folder Name="Protected" Id="{e033cc0f-6074-4433-a8dd-f846b19ebff8}" />
    <Method Name="Clone" Id="{a5f81b8c-4444-462b-9968-c96bb0973a9b}">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Deserializer
VAR
	pClone : POINTER TO JsonDeserializerNullNode;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(JsonDeserializerNullNode(ParentJsonDeserializer := parent));
Clone := pClone^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateNullArrayEnumerator" Id="{5145d944-1170-4a01-b1c8-ecfbcd42bc2d}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED CreateNullArrayEnumerator : I_DeserializerArrayForwardEnumerator
VAR_INPUT
END_VAR
VAR
	pForwardEnumerator : POINTER TO JsonDeserializerNullArrayForwardEnumerator;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pForwardEnumerator := __NEW(JsonDeserializerNullArrayForwardEnumerator(ParentJsonDeserializer := parent, ParentNullDeserializer := THIS^));
CreateNullArrayEnumerator := pForwardEnumerator^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateNullObjectEnumerator" Id="{b2d3c566-e2be-4b56-90f5-e89976a2d0c0}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED CreateNullObjectEnumerator : I_DeserializerObjectForwardEnumerator
VAR_INPUT
END_VAR
VAR
	pForwardEnumerator : POINTER TO JsonDeserializerNullObjectForwardEnumerator;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[pForwardEnumerator := __NEW(JsonDeserializerNullObjectForwardEnumerator(ParentJsonDeserializer := parent, ParentNullDeserializer := THIS^));
CreateNullObjectEnumerator := pForwardEnumerator^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{8418ab26-c3b0-408f-a534-aaa292e34de7}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	ParentJsonDeserializer : I_JsonDeserializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.parent := ParentJsonDeserializer;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetArray" Id="{6ef9efb1-8988-4cff-9311-9852a6f1e9dd}">
      <Declaration><![CDATA[METHOD GetArray : I_Deserializer
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetArray := this^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetArrayEnumerator" Id="{32e0ede9-7cf2-4849-a2ef-7aee14092713}">
      <Declaration><![CDATA[METHOD GetArrayEnumerator : I_DeserializerArrayForwardEnumerator
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetArrayEnumerator := CreateNullArrayEnumerator();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetElementByIndex" Id="{dc129ace-3cfb-4da4-bbf1-953b77b09b36}">
      <Declaration><![CDATA[METHOD GetElementByIndex : I_Deserializer
VAR_INPUT
	Index : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetElementByIndex := this^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetKeyArray" Id="{897e09b9-1a57-4610-9bb5-e744f3873e82}">
      <Declaration><![CDATA[METHOD GetKeyArray : I_Deserializer
VAR_INPUT
	Key : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetKeyArray := this^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetKeyObject" Id="{93d8a034-2eec-45ad-b466-cb4d7f9a4eba}">
      <Declaration><![CDATA[METHOD GetKeyObject : I_Deserializer
VAR_INPUT
	Key : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetKeyObject := this^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetObject" Id="{534b99a9-a187-46d1-b3dd-dfc32bb26740}">
      <Declaration><![CDATA[METHOD GetObject : I_Deserializer
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetObject := this^;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetObjectEnumerator" Id="{3ddca54b-091e-4123-ba1c-ebf3a4e6fc13}">
      <Declaration><![CDATA[METHOD GetObjectEnumerator : I_DeserializerObjectForwardEnumerator
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetObjectEnumerator := CreateNullObjectEnumerator();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeKeyToObject" Id="{f33529e1-d240-4d27-b4b2-e6d05e8e9d98}">
      <Declaration><![CDATA[METHOD TryDeserializeKeyToObject : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Object : I_Deserializable;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Key = '' THEN
	error := errorFactory.CreateInvalidKeyError();
	Feedback.LogError(error);
	RETURN;
END_IF

TryDeserializeKeyToObject := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryDeserializeToObject" Id="{1d397c0b-c2c1-4e53-b216-b5c67e90a08a}">
      <Declaration><![CDATA[METHOD TryDeserializeToObject : BOOL
VAR_INPUT
	Object : I_Deserializable;
	Feedback : I_DeserializerFeedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryDeserializeToObject := Object.TryDeserializeFrom(THIS^, Feedback);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetBase64" Id="{ec4bd9cb-bc8e-4c69-b0f4-043a533bdfb9}">
      <Declaration><![CDATA[METHOD TryGetBase64 : BOOL
VAR_INPUT
	pBytes : POINTER TO BYTE;
	nBytes : DINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('Base64');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetBool" Id="{ec432f22-0913-4461-a261-27fdc3a60bfe}">
      <Declaration><![CDATA[METHOD TryGetBool : BOOL
VAR_INPUT
	Destination : REFERENCE TO BOOL;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('BOOL');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetByte" Id="{253f8bf1-a337-4deb-8037-ccc76281e2cf}">
      <Declaration><![CDATA[METHOD TryGetByte : BOOL
VAR_INPUT
	Destination : REFERENCE TO BYTE;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('BYTE');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetDateTime" Id="{efadee1e-c9a3-42d9-905b-2114cf48d8d7}">
      <Declaration><![CDATA[METHOD TryGetDateTime : BOOL
VAR_INPUT
	Destination : REFERENCE TO DATE_AND_TIME;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('DATE_AND_TIME');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetDcTime" Id="{0f363c16-f790-4052-b2c3-725e5963f3f0}">
      <Declaration><![CDATA[METHOD TryGetDcTime : BOOL
VAR_INPUT
	Destination : REFERENCE TO DCTIME;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('DCTIME');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetDint" Id="{cdf55514-2d55-47aa-92c9-620383609abb}">
      <Declaration><![CDATA[METHOD TryGetDint : BOOL
VAR_INPUT
	Destination : REFERENCE TO DINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('DINT');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetDword" Id="{fa055236-76ee-4a28-aade-c48830d74366}">
      <Declaration><![CDATA[METHOD TryGetDword : BOOL
VAR_INPUT
	Destination : REFERENCE TO DWORD;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('DWORD');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetElementByIndex" Id="{9f9a7cea-b69b-0015-30d3-6403ff0aa914}">
      <Declaration><![CDATA[METHOD TryGetElementByIndex : BOOL
VAR_INPUT
	Index : UDINT;
	Destination : REFERENCE TO I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('ARRAY');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetFileTime" Id="{3e07b982-a6a0-493f-ad0d-8c7a280033f3}">
      <Declaration><![CDATA[METHOD TryGetFileTime : BOOL
VAR_INPUT
	Destination : REFERENCE TO FILETIME;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('FILETIME');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetHexAsBytes" Id="{40df6e8a-6979-47a3-9427-c8aba8073fb2}">
      <Declaration><![CDATA[METHOD TryGetHexAsBytes : BOOL
VAR_INPUT
	pBytes : POINTER TO BYTE;
	nBytes : DINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('HexBinary');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetInt" Id="{f3e3ca59-174a-4f43-a247-5278569381fa}">
      <Declaration><![CDATA[METHOD TryGetInt : BOOL
VAR_INPUT
	Destination : REFERENCE TO INT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('INT');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyBase64" Id="{122de2ca-e615-4061-a347-6ce6a979d744}">
      <Declaration><![CDATA[METHOD TryGetKeyBase64 : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	pBytes : POINTER TO BYTE;
	nBytes : DINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('Base64',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyBool" Id="{d720b094-c1c4-47b5-9f60-ebd662af0670}">
      <Declaration><![CDATA[METHOD TryGetKeyBool : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO BOOL;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('BOOL',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyByte" Id="{4054082b-acd8-40b9-bf2a-9d34c3f89ba0}">
      <Declaration><![CDATA[METHOD TryGetKeyByte : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO BYTE;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('BYTE',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyDateTime" Id="{5bf19f3d-21c8-4784-93ae-3f31e58b41ac}">
      <Declaration><![CDATA[METHOD TryGetKeyDateTime : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO DATE_AND_TIME;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('DATE_AND_TIME',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyDcTime" Id="{65d62dd0-5f08-4ac4-a183-0a6739639c47}">
      <Declaration><![CDATA[METHOD TryGetKeyDcTime : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO DCTIME;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('DCTIME',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyDint" Id="{b60da419-a7a0-4d34-8fbf-c63460d63961}">
      <Declaration><![CDATA[METHOD TryGetKeyDint : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO DINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('DINT',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyDword" Id="{6045889e-ee4a-4280-a2cf-91d94cad4188}">
      <Declaration><![CDATA[METHOD TryGetKeyDword : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO DWORD;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('DWORD',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyFileTime" Id="{0a4aee9a-2f21-4be2-95c1-a30dfd270bb6}">
      <Declaration><![CDATA[METHOD TryGetKeyFileTime : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO FILETIME;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('FILETIME',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyHexAsBytes" Id="{015f45db-99dd-42e6-b187-66c7e2cba4e3}">
      <Declaration><![CDATA[METHOD TryGetKeyHexAsBytes : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	pBytes : POINTER TO BYTE;
	nBytes : DINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('HexBinary',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyInt" Id="{f6c6afca-c3d5-42c3-b8fe-0324eae60467}">
      <Declaration><![CDATA[METHOD TryGetKeyInt : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO INT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('INT',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyLint" Id="{3fad408a-05bf-4471-9567-e6dc35fb3fa3}">
      <Declaration><![CDATA[METHOD TryGetKeyLint : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO LINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('LINT',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyLreal" Id="{7ee12d60-2b0a-498f-8321-475602eee814}">
      <Declaration><![CDATA[METHOD TryGetKeyLreal : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO LREAL;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('LREAL',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyLtime" Id="{53ab6faf-5324-47f3-af76-2f87fc86d56a}">
      <Declaration><![CDATA[METHOD TryGetKeyLtime : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO LTIME;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('LTIME',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyLword" Id="{ce62502b-edb1-4ff4-9ab4-58a76e26f588}">
      <Declaration><![CDATA[METHOD TryGetKeyLword : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO LWORD;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('LWORD',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyReal" Id="{a6a9322b-5062-4bcd-83c1-c213833744cc}">
      <Declaration><![CDATA[METHOD TryGetKeyReal : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO REAL;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('REAL',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeySint" Id="{ea4b6934-ab7a-462e-b9cd-ffbf24ad9012}">
      <Declaration><![CDATA[METHOD TryGetKeySint : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO SINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('SINT',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyString" Id="{efc5068a-e205-4a30-8dcd-c229eedf378f}">
      <Declaration><![CDATA[METHOD TryGetKeyString : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO STRING;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('STRING',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyTime" Id="{440d279e-3ff3-4fa0-8a6f-8c63dbb475ef}">
      <Declaration><![CDATA[METHOD TryGetKeyTime : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO TIME;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('TIME',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyTod" Id="{1f97ec0b-b95e-43e9-969e-9eab4e414415}">
      <Declaration><![CDATA[METHOD TryGetKeyTod : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO TOD;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('TOD',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyUdint" Id="{6f44bcee-ef5a-43c2-8bf3-76b42d6d07d3}">
      <Declaration><![CDATA[METHOD TryGetKeyUdint : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO UDINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('UDINT',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyUint" Id="{a4235d02-9ea5-4883-84c3-94f0410f34b3}">
      <Declaration><![CDATA[METHOD TryGetKeyUint : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO UINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('UINT',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyUlint" Id="{3f42d317-6d45-46e1-88d5-073561c1ade4}">
      <Declaration><![CDATA[METHOD TryGetKeyUlint : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO ULINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('ULINT',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyUsint" Id="{d4791a71-10eb-4867-8926-52e89cac9fc0}">
      <Declaration><![CDATA[METHOD TryGetKeyUsint : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO USINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('USINT',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetKeyWord" Id="{229320d5-43a9-4aae-b004-89614c8fa792}">
      <Declaration><![CDATA[METHOD TryGetKeyWord : BOOL
VAR_INPUT
	Key : T_MAXSTRING;
	Destination : REFERENCE TO WORD;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectKeyTypeError('USINT',Key);
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetLint" Id="{36bc3979-297a-467c-939c-3f1f88515e54}">
      <Declaration><![CDATA[METHOD TryGetLint : BOOL
VAR_INPUT
	Destination : REFERENCE TO LINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('LINT');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetLreal" Id="{632f6d19-7d7a-439c-84f8-d5f02e710c8f}">
      <Declaration><![CDATA[METHOD TryGetLreal : BOOL
VAR_INPUT
	Destination : REFERENCE TO LREAL;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('LREAL');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetLtime" Id="{d6a1e31c-aa1a-4778-acf8-359621663aa2}">
      <Declaration><![CDATA[METHOD TryGetLtime : BOOL
VAR_INPUT
	Destination : REFERENCE TO LTIME;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('LTIME');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetLword" Id="{f7a48dba-0450-4844-b097-6c200e0a8e5a}">
      <Declaration><![CDATA[METHOD TryGetLword : BOOL
VAR_INPUT
	Destination : REFERENCE TO LWORD;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('LWORD');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetReal" Id="{ac9cb734-3698-4df5-801e-4bc665d3c852}">
      <Declaration><![CDATA[METHOD TryGetReal : BOOL
VAR_INPUT
	Destination : REFERENCE TO REAL;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('REAL');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetSint" Id="{72728f23-cb4d-4fc0-9b9f-52f28a10fd1d}">
      <Declaration><![CDATA[METHOD TryGetSint : BOOL
VAR_INPUT
	Destination : REFERENCE TO SINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('SINT');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetString" Id="{16a43299-1e03-4dc4-900f-544a7e1cb2ba}">
      <Declaration><![CDATA[METHOD TryGetString : BOOL
VAR_INPUT
	Destination : REFERENCE TO STRING;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('STRING');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetTime" Id="{2877c8dc-82ba-46fa-8bef-b753c75a44c1}">
      <Declaration><![CDATA[METHOD TryGetTime : BOOL
VAR_INPUT
	Destination : REFERENCE TO TIME;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('TIME');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetTod" Id="{5fe05c1f-fb2c-42b3-bf59-ba9e22e12bc3}">
      <Declaration><![CDATA[METHOD TryGetTod : BOOL
VAR_INPUT
	Destination : REFERENCE TO TOD;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('TOD');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetUdint" Id="{50ca5429-c7a1-4f77-b924-2f142d1b0547}">
      <Declaration><![CDATA[METHOD TryGetUdint : BOOL
VAR_INPUT
	Destination : REFERENCE TO UDINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('UDINT');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetUint" Id="{bcd0df62-9b4c-41c5-93bf-76393189dad4}">
      <Declaration><![CDATA[METHOD TryGetUint : BOOL
VAR_INPUT
	Destination : REFERENCE TO UINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('UINT');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetUlint" Id="{b5ddf256-84bc-4d05-9941-709f96565d8e}">
      <Declaration><![CDATA[METHOD TryGetUlint : BOOL
VAR_INPUT
	Destination : REFERENCE TO ULINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('ULINT');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetUsint" Id="{80745347-918f-40ec-b9df-77ab65db14f9}">
      <Declaration><![CDATA[METHOD TryGetUsint : BOOL
VAR_INPUT
	Destination : REFERENCE TO USINT;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('USINT');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetWord" Id="{0ad8af14-740a-44f3-a1e4-6ff9d5eff40d}">
      <Declaration><![CDATA[METHOD TryGetWord : BOOL
VAR_INPUT
	Destination : REFERENCE TO WORD;
	Feedback : I_DeserializerFeedback;
END_VAR
VAR
	error : I_Error;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[error := errorFactory.CreateIncorrectTypeError('WORD');
Feedback.LogError(error);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>