<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="_SINT" Id="{122dae3f-1273-407a-bdae-00ea5e1a351a}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK _SINT EXTENDS NumericDatatypeBase
VAR
	localData : SINT;
	activeData : REFERENCE TO SINT REF= localData;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{620d8041-d200-494e-a9ed-e17e20d816fc}" />
    <Folder Name="Protected" Id="{49ec95fa-b67e-47c5-8f75-69b18b64e960}" />
    <Property Name="Address" Id="{4ddd0566-0a63-4e49-9352-cc96c83081a4}">
      <Declaration><![CDATA[PROPERTY PUBLIC Address : PVOID]]></Declaration>
      <Get Name="Get" Id="{96b793ff-234d-4067-91dc-7cfdf170fbc7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := ADR(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearReference" Id="{dd773684-6d6f-42d9-b0f6-37fbc077f9e4}">
      <Declaration><![CDATA[METHOD PUBLIC ClearReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= localData;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{7049dd9b-4aeb-46ba-a2de-729447d77a3f}">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Datatype
VAR
    pClone : POINTER TO _SINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(_SINT(InitialValue := Value));
Clone := pClone^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{e7aab2c8-9995-47db-a1c1-cb95393376c4}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	InitialValue : SINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[localData := InitialValue;]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsEven" Id="{b2f439a4-6c18-026e-0cb9-ed253d188b87}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsEven : BOOL]]></Declaration>
      <Get Name="Get" Id="{c264015b-733b-0005-39b3-73bd99879814}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsEven := (Value mod 2) = 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsFloat" Id="{2560d36f-245d-4358-86f0-416fcd4ec702}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsFloat : BOOL]]></Declaration>
      <Get Name="Get" Id="{d20517ba-96cd-416f-812c-1a43495aa00a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsFloat := FALSE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsSigned" Id="{727e2535-e220-494b-a91a-2d750f420fda}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsSigned : BOOL]]></Declaration>
      <Get Name="Get" Id="{4992e98b-018a-46ab-a2e9-65e69df1ec4d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsSigned := TRUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MakeReferenceTo" Id="{01a4a022-49ba-4f1b-8d8f-931d313003c5}">
      <Declaration><![CDATA[METHOD PUBLIC MakeReferenceTo
VAR_INPUT
	ReferenceTarget : REFERENCE TO SINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= ReferenceTarget;]]></ST>
      </Implementation>
    </Method>
    <Property Name="MaxValue" Id="{1695e1cb-46ec-45b5-b736-7d31692ea918}">
      <Declaration><![CDATA[PROPERTY PUBLIC MaxValue : SINT]]></Declaration>
      <Get Name="Get" Id="{52db4707-d80f-4974-bb04-59210d9e22e8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MaxValue :=  DatatypeLimits.SINT_MAX_VALUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MinValue" Id="{65e7ba36-6d34-48c4-90cf-358f31d16e5d}">
      <Declaration><![CDATA[PROPERTY PUBLIC MinValue : SINT]]></Declaration>
      <Get Name="Get" Id="{2a127439-4478-4a63-a6b3-7e84bf6f4035}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MinValue := DatatypeLimits.SINT_MIN_VALUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SerializeMaxValue" Id="{cefeec5e-1261-4fc3-8a96-0f583754b051}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SerializeMaxValue
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.AddSint(MaxValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeMinValue" Id="{2d0abd04-e5ed-4897-a9f7-b546e3623d1d}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SerializeMinValue
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.AddSint(MinValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{68ba6099-8e9c-4cb6-b8be-a3cf464e9e1b}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.AddSint(activeData);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{d6e1d4df-d1c1-4de1-9586-d1b9aff0e0a0}">
      <Declaration><![CDATA[PROPERTY PUBLIC Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{b8e1e8f0-5f8c-40d7-9646-7c5c99df1d92}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := SIZEOF(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryDeserializeFrom" Id="{5cd18f75-5029-48ea-8dad-a46f1b9b3e2d}">
      <Declaration><![CDATA[METHOD TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryDeserializeFrom := Deserializer.TryGetSint(activeData, Feedback);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryMakeReferenceTo" Id="{c3f6a5d7-9307-460c-a89a-e3ce28f84912}">
      <Declaration><![CDATA[METHOD TryMakeReferenceTo : BOOL
VAR_INPUT
	Target : I_Datatype;
END_VAR
VAR
	pTargetData : POINTER TO SINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsEquivalentTo(Target) THEN
	RETURN;
END_IF

pTargetData := Target.Address;
activeData REF= pTargetData^;
TryMakeReferenceTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="TypeName" Id="{ce884252-29b0-459b-b0c7-c78add9ed838}">
      <Declaration><![CDATA[PROPERTY PUBLIC TypeName : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{aa939f2f-2a9d-4703-ac26-e1ad2269cf20}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TypeName := 'SINT';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Value" Id="{ba767074-e750-4e97-97b2-95346054af2d}">
      <Declaration><![CDATA[PROPERTY PUBLIC Value : REFERENCE TO SINT]]></Declaration>
      <Get Name="Get" Id="{8221e489-838c-452c-bc29-60cb7f7f8afb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value REF= activeData;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>