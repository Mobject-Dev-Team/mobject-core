<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="_BYTE" Id="{015fee84-30df-4efb-96c8-fa65eaa5aa83}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK _BYTE EXTENDS NumericDatatypeBase
VAR
	localData : BYTE;
	activeData : REFERENCE TO BYTE REF= localData;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{52a26577-a6bc-4aa5-9ef8-f187627d1642}" />
    <Folder Name="Protected" Id="{8aa9057a-15bb-4079-bf78-cfd21590127a}" />
    <Property Name="Address" Id="{f4658331-4fdd-43d9-be9e-00542c59946a}">
      <Declaration><![CDATA[PROPERTY PUBLIC Address : PVOID]]></Declaration>
      <Get Name="Get" Id="{d753ed97-43be-40c2-a48d-d6d299103d65}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := ADR(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearReference" Id="{3854d391-b7b2-4b47-9f9a-18e69b0dcbda}">
      <Declaration><![CDATA[METHOD PUBLIC ClearReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= localData;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{e218fd2c-90c0-45b2-a3dc-c3ce9829dc9a}">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Datatype
VAR
    pClone : POINTER TO _BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(_BYTE(InitialValue := Value));
Clone := pClone^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{c73f40e7-da83-43bf-b9c3-680c5d3df281}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	InitialValue : BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[localData := InitialValue;]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsEven" Id="{0bd65d0c-d483-08a8-3b31-f7c1093a4208}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsEven : BOOL]]></Declaration>
      <Get Name="Get" Id="{65b92a46-be93-0abd-3c3f-3f58d52dd0fb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsEven := (Value mod 2) = 0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsFloat" Id="{65b20559-d076-483f-b3d3-9f65fcb52652}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsFloat : BOOL]]></Declaration>
      <Get Name="Get" Id="{e8ca72cd-2c65-4183-94e9-64387bc9c4f2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsFloat := FALSE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="IsSigned" Id="{83a3b0ce-180f-4907-989b-f922d0f2214e}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsSigned : BOOL]]></Declaration>
      <Get Name="Get" Id="{d6690cbf-d958-4d50-9841-8375714a31ff}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsSigned := FALSE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MakeReferenceTo" Id="{18ec47ae-83dd-4afc-a3f0-890a89595ae0}">
      <Declaration><![CDATA[METHOD PUBLIC MakeReferenceTo
VAR_INPUT
	ReferenceTarget : REFERENCE TO BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= ReferenceTarget;]]></ST>
      </Implementation>
    </Method>
    <Property Name="MaxValue" Id="{47ded2cf-bef0-4212-afe1-d53ae7a8073a}">
      <Declaration><![CDATA[PROPERTY PUBLIC MaxValue : BYTE]]></Declaration>
      <Get Name="Get" Id="{be9751fc-c4c7-4b02-b040-d761b9f03f84}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MaxValue := DatatypeLimits.BYTE_MAX_VALUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="MinValue" Id="{b0a5acb4-937e-49e0-ae6b-7185073a6fe6}">
      <Declaration><![CDATA[PROPERTY PUBLIC MinValue : BYTE]]></Declaration>
      <Get Name="Get" Id="{8b359cfc-8c76-478a-a1b9-a2dfcc7188e4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[MinValue := DatatypeLimits.BYTE_MIN_VALUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SerializeMaxValue" Id="{2b2dd19b-d33d-47a5-a3fd-8f7871724ec3}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SerializeMaxValue
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.AddByte(MaxValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeMinValue" Id="{6bd0c9eb-7393-4705-994d-fa6038d95d76}" FolderPath="Protected\">
      <Declaration><![CDATA[METHOD PROTECTED SerializeMinValue
VAR_INPUT
	Serializer : I_Serializer;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.AddByte(MinValue);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{66fb1589-93aa-48cc-9b7f-87181c23e74d}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.AddByte(activeData);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{7f95387a-676f-4254-8a17-a3b6e9673cda}">
      <Declaration><![CDATA[PROPERTY PUBLIC Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{128d205a-ce0d-44fe-9ee1-7b8137c3ed50}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := SIZEOF(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryDeserializeFrom" Id="{ed654a62-7512-4173-bcd9-55f451d1c2af}">
      <Declaration><![CDATA[METHOD TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryDeserializeFrom := Deserializer.TryGetByte(activeData, Feedback);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryMakeReferenceTo" Id="{dc7c26da-384c-431a-824b-f41d2d332124}">
      <Declaration><![CDATA[METHOD TryMakeReferenceTo : BOOL
VAR_INPUT
	Target : I_Datatype;
END_VAR
VAR
	pTargetData : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT (Target.TypeName = TypeName) THEN
	RETURN;
END_IF

pTargetData := Target.Address;
activeData REF= pTargetData^;
TryMakeReferenceTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="TypeName" Id="{1c1c2320-0402-4c90-bee9-948e0946fa55}">
      <Declaration><![CDATA[PROPERTY PUBLIC TypeName : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{2f3ac17e-d722-4c9a-a69e-7923adb5d499}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TypeName := 'BYTE';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Value" Id="{2e144ab6-c08f-45e7-82aa-2cda5774589e}">
      <Declaration><![CDATA[PROPERTY PUBLIC Value : REFERENCE TO BYTE]]></Declaration>
      <Get Name="Get" Id="{43823d97-4013-4032-a00f-d395ded07007}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value REF= activeData;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>