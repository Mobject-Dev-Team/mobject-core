<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="OrderedDictionaryForwardEnumerator" Id="{898d45da-dd3e-03e6-358a-9b87db799dc2}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK OrderedDictionaryForwardEnumerator EXTENDS Disposable IMPLEMENTS I_KeyValueForwardEnumerator, I_EventHandler
VAR
	parent : I_Dictionary;
	nodes : I_Collection;
	collectionEnumerator : I_ForwardEnumerator;
	currentNode : I_OrderedDictionaryTreeNode;
	moveNextCalled : BOOL := FALSE;
	invalid : BOOL := FALSE; 
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{e83ced27-4aa6-04b2-2f35-4dad5e84d059}" />
    <Folder Name="Destructor" Id="{67f0991a-1b9e-0776-0207-1d4c4534acc1}" />
    <Method Name="FB_exit" Id="{1dba03f9-82b0-0e69-1748-690cbdbbe800}" FolderPath="Destructor\">
      <Declaration><![CDATA[METHOD FB_exit : BOOL
VAR_INPUT
	bInCopyCode : BOOL; // if TRUE, the exit method is called for exiting an instance that is copied afterwards (online change).
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bInCopyCode THEN
	RETURN;
END_IF

collectionEnumerator.Dispose();
nodes.Dispose();

IF parent = 0 THEN
	RETURN;
END_IF

parent.OffEvent('OnChanged',THIS^);
parent.OffEvent('OnDisposed',THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{2f663d35-6263-02cb-3a89-dd5a2a07c51e}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	Parent : I_Dictionary;
	Nodes : I_Collection;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Parent.OnEvent('OnChanged',THIS^);
Parent.OnEvent('OnDisposed',THIS^);
THIS^.parent := Parent;
THIS^.nodes := Nodes;
THIS^.collectionEnumerator := Nodes.GetEnumerator();]]></ST>
      </Implementation>
    </Method>
    <Method Name="HandleEvent" Id="{682e46cd-8573-00c9-35db-f033b001ab27}">
      <Declaration><![CDATA[METHOD PUBLIC HandleEvent
VAR_INPUT
	Event : I_Event;
END_VAR
VAR
	changedEvent : I_KeyValueCollectionChangedEvent;
	disposedEvent : I_KeyValueCollectionDisposedEvent;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF __QUERYINTERFACE(Event, changedEvent) THEN
	invalid := TRUE;
	currentNode := 0;
ELSIF __QUERYINTERFACE(Event, disposedEvent) THEN
	parent := 0;	
	Dispose();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="IsValid" Id="{1458f4e4-31fc-0b85-2be8-277284c8ca6f}">
      <Declaration><![CDATA[PROPERTY PUBLIC IsValid : BOOL]]></Declaration>
      <Get Name="Get" Id="{fcafb1c1-a440-0bb4-1815-d392123d2f1b}">
        <Declaration><![CDATA[PUBLIC]]></Declaration>
        <Implementation>
          <ST><![CDATA[IsValid := (not invalid and parent <> 0);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Key" Id="{4b91b6b6-8744-0ee3-2c2c-5a0639b6b333}">
      <Declaration><![CDATA[PROPERTY PUBLIC Key : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{30dc230a-fc7d-0ecd-3d95-3bf5fd7b3ce6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF NOT IsValid THEN
	RETURN;
END_IF

IF currentNode = 0 THEN
	RETURN;
END_IF

Key := currentNode.Key;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="MoveNext" Id="{300846db-25a3-01a7-03de-1d354813d077}">
      <Declaration><![CDATA[METHOD PUBLIC MoveNext : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF invalid THEN
	RETURN;
END_IF

IF collectionEnumerator.MoveNext() THEN
	collectionEnumerator.TryGet(currentNode);
	MoveNext := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Reset" Id="{9c54b5d9-5181-0fc2-3375-d6d092ff2c9f}">
      <Declaration><![CDATA[METHOD Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[moveNextCalled := FALSE;
collectionEnumerator.Reset();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGet" Id="{d95c76af-0415-04d6-1a38-588221e5d03a}">
      <Declaration><![CDATA[METHOD PUBLIC TryGet : BOOL;
VAR_INPUT
	Destination : ANY;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF currentNode <> 0 THEN
	TryGet := currentNode.TryGet(Destination);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryGetTo" Id="{65efee9a-7943-0a3d-06f1-6b6253bacf27}">
      <Declaration><![CDATA[METHOD PUBLIC TryGetTo : BOOL;
VAR_INPUT
	DestinationAddress : PVOID;
	DestinationSize : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF currentNode <> 0 THEN
	TryGetTo := currentNode.TryGetTo(DestinationAddress,DestinationSize);
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>