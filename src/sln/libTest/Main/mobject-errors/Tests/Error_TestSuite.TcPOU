<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Error_TestSuite" Id="{0a6c1542-df61-4f0f-8e8a-d8ebdacde59d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Error_TestSuite EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAccept();
TestErrorType();
TestIsSameAsWithSameErrors();
TestIsSameAsWithDifferentErrors();
TestMessage();
TestSerializeWith();]]></ST>
    </Implementation>
    <Method Name="TestAccept" Id="{1a0dfb38-b886-406c-988a-47b6732e8986}">
      <Declaration><![CDATA[METHOD PUBLIC TestAccept
VAR
	error : MockError(MockErrorType:='',MockMessage:='');
	visitor : MockErrorVisitor(ExpectedError := error);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAccept');

error.Accept(visitor);

AssertTrue(
	Condition := visitor.VisitedCorrectError,
	Message := 'Did not invoke VisitError on the visitor'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestErrorType" Id="{7e85b0c9-960d-4a6a-a01b-908e74cf9f15}">
      <Declaration><![CDATA[METHOD PUBLIC TestErrorType
VAR
	error : MockError(MockErrorType:='TestErrorType123',MockMessage:='');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestErrorType');

AssertEquals_String(
	Actual := error.ErrorType,
	Expected := 'TestErrorType123',
	Message := 'Did not return the expected ErrorType'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsSameAsWithDifferentErrors" Id="{60558a3a-6fc6-40e4-a8d9-f94cafb6938d}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsSameAsWithDifferentErrors
VAR
	error1 : MockError(MockErrorType:='ERROR_TYPE_A',MockMessage:='Message 1');
	error2 : MockError(MockErrorType:='ERROR_TYPE_B',MockMessage:='Message 2');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsSameAsWithDifferentErrors');

AssertFalse(
	Condition := error1.IsSameAs(error2),
	Message := 'Did not correctly identify errors as being different type'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsSameAsWithSameErrors" Id="{52314d76-924e-4f05-b4c5-097d6344edbc}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsSameAsWithSameErrors
VAR
	error1 : MockError(MockErrorType:='ERROR_TYPE_A',MockMessage:='Message 1');
	error2 : MockError(MockErrorType:='ERROR_TYPE_A',MockMessage:='Message 2');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsSameAsWithSameErrors');

AssertTrue(
	Condition := error1.IsSameAs(error2),
	Message := 'Did not correctly identify errors as being the same type'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMessage" Id="{2362c0f8-67d3-4fd8-9cd6-d6738333a328}">
      <Declaration><![CDATA[METHOD PUBLIC TestMessage
VAR
	error : MockError(MockErrorType:='',MockMessage:='TestMessage123');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMessage');

AssertEquals_String(
	Actual := error.Message,
	Expected := 'TestMessage123',
	Message := 'Did not return the expected Message'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{3971b2d0-a2a7-4cd8-a4cc-d3ba2e5c1e18}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
	error : MockError(MockErrorType:='test1',MockMessage:='test2');
	serializer : MockJsonSerializer;
	result : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

error.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(result), SIZEOF(result));

AssertEquals_String(
	Actual := result,
	Expected := '{"errorType":"test1","message":"test2"}',
	Message := 'Did not serialize correctly'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>