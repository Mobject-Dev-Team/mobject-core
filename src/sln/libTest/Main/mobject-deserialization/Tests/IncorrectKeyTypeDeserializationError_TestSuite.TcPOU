<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="IncorrectKeyTypeDeserializationError_TestSuite" Id="{22a72a39-d279-45b0-8d01-c9ca9ba37a12}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK IncorrectKeyTypeDeserializationError_TestSuite EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAccept();
TestErrorType();
TestIsSameAsWithSameErrors();
TestIsSameAsWithDifferentErrors();
TestMessage();
TestSerializeWith();]]></ST>
    </Implementation>
    <Method Name="TestAccept" Id="{e5579a86-f0dd-4de2-93a2-9ba7facd1d7a}">
      <Declaration><![CDATA[METHOD PUBLIC TestAccept
VAR
	error : IncorrectKeyTypeDeserializationError('testType', 'testKey');
	visitor : MockErrorVisitor(ExpectedError := error);
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAccept');

error.Accept(visitor);

AssertTrue(
	Condition := visitor.VisitedCorrectError,
	Message := 'Did not invoke VisitError on the visitor'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestErrorType" Id="{de339bf3-9605-460d-82d2-7d959db59127}">
      <Declaration><![CDATA[METHOD PUBLIC TestErrorType
VAR
	error : IncorrectKeyTypeDeserializationError('testType', 'testKey');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestErrorType');

AssertEquals_String(
	Actual := error.ErrorType,
	Expected := 'INCORRECT_DATATYPE_DESERIALIZATION_ERROR',
	Message := 'Did not return the expected ErrorType'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsSameAsWithDifferentErrors" Id="{d2b56da2-0a9a-4341-9bcf-226505f61b9a}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsSameAsWithDifferentErrors
VAR
	error1 : IncorrectKeyTypeDeserializationError('testType', 'testKey');
	error2 : MockError(MockErrorType:='ERROR_TYPE_B',MockMessage:='Message 2');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsSameAsWithDifferentErrors');

AssertFalse(
	Condition := error1.IsSameAs(error2),
	Message := 'Did not correctly identify errors as being different type'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsSameAsWithSameErrors" Id="{fcf0eec8-5cf0-47e0-9284-a8c4653bf531}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsSameAsWithSameErrors
VAR
	error1 : IncorrectKeyTypeDeserializationError('testType', 'testKey');
	error2 : MockError(MockErrorType:='INCORRECT_DATATYPE_DESERIALIZATION_ERROR',MockMessage:='Message');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsSameAsWithSameErrors');

AssertTrue(
	Condition := error1.IsSameAs(error2),
	Message := 'Did not correctly identify errors as being the same type'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMessage" Id="{5c3ed910-85c6-449a-bea5-1833c89d9a6e}">
      <Declaration><![CDATA[METHOD PUBLIC TestMessage
VAR
	error : IncorrectKeyTypeDeserializationError('testType', 'testKey');
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMessage');

AssertEquals_String(
	Actual := error.Message,
	Expected := 'Deserialization Failed, Incorrect Datatype : testType for key : testKey',
	Message := 'Did not return the expected Message'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{38a85010-352c-427b-a187-5b72ce78cdfa}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
	error : IncorrectKeyTypeDeserializationError('testType', 'testKey');
	serializer : MockJsonSerializer;
	result : T_MAXSTRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

error.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(result), SIZEOF(result));

AssertEquals_String(
	Actual := result,
	Expected := '{"errorType":"INCORRECT_DATATYPE_DESERIALIZATION_ERROR","message":"Deserialization Failed, Incorrect Datatype : testType for key : testKey"}',
	Message := 'Did not serialize correctly'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>