<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="StackForwardEnumerator_TestSuite" Id="{8d1893de-564c-02f4-1064-c4e85c2764c1}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC StackForwardEnumerator_TestSuite EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[CheckIsValidAtStart();
CheckMoveNextReturnsFalseAtTheEnd();
CheckMoveNextReturnsFalseWhenEmpty();
CheckMoveNextReturnsTrueMultipleItems();
CheckMoveNextReturnsTrueSingleItem();
CheckReset();
CheckTryGet();
CheckTryGetTo();
CheckWorksWithIntegers();
CheckWorksWithStrings();
CheckWorksWithArrays();]]></ST>
    </Implementation>
    <Method Name="CheckIsValidAtStart" Id="{81193b4d-3db2-076e-297c-f00b037c4c36}">
      <Declaration><![CDATA[METHOD PUBLIC CheckIsValidAtStart
VAR
	result : BOOL;
	stack : Stack;
	enumerator : I_ForwardEnumerator;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckIsValidAtStart');

enumerator := stack.GetEnumerator();

result := enumerator.IsValid;
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsFalseAtTheEnd" Id="{54baeae2-39e2-07c7-076a-1f0ad6efd55e}">
      <Declaration><![CDATA[METHOD PRIVATE CheckMoveNextReturnsFalseAtTheEnd
VAR
	in1 : INT := 123;
	result : BOOL;
	stack : Stack;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsFalseAtTheEnd');

stack.Push(in1);
enumerator := stack.GetEnumerator();

enumerator.MoveNext();
result := enumerator.MoveNext();
enumerator.Dispose();

AssertFalse(result,
    'MoveNext did not correctly signal the end of the enumeration');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsFalseWhenEmpty" Id="{3580546a-f3b9-071e-1e63-680056c67b1c}">
      <Declaration><![CDATA[METHOD PUBLIC CheckMoveNextReturnsFalseWhenEmpty
VAR
	result : BOOL;
	stack : Stack;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsFalseWhenEmpty');

enumerator := stack.GetEnumerator();

result := enumerator.MoveNext();
enumerator.Dispose();

AssertFalse(
	Condition := result,
	Message := 'MoveNext did not correctly signal the end of the enumeration'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsTrueMultipleItems" Id="{ca55a3bd-791f-07a1-212d-19cf7c6c8413}">
      <Declaration><![CDATA[METHOD PRIVATE CheckMoveNextReturnsTrueMultipleItems
VAR
	in1 : INT := 123;
	in2 : INT := 456;
	in3 : INT := 789;
	result : BOOL;
	stack : Stack;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsTrueMultipleItems');

stack.Push(in1);
stack.Push(in2);
stack.Push(in3);
enumerator := stack.GetEnumerator();

result := enumerator.MoveNext();
enumerator.Dispose();

AssertTrue(result, 'MoveNext did not correctly signal there were more items to follow');

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckMoveNextReturnsTrueSingleItem" Id="{bcf3ef8f-1ff8-08ed-1f1e-8cfd03d07941}">
      <Declaration><![CDATA[METHOD PRIVATE CheckMoveNextReturnsTrueSingleItem
VAR
	in1 : INT := 123;
	result : BOOL;
	stack : Stack;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckMoveNextReturnsTrueSingleItem');

stack.Push(in1);
enumerator := stack.GetEnumerator();

result := enumerator.MoveNext();
enumerator.Dispose();

AssertTrue(result,
    'MoveNext did not correctly signal there were more items to follow');
	
TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckReset" Id="{7cf1af67-a228-0901-3b4d-4c8d1831d64c}">
      <Declaration><![CDATA[METHOD PUBLIC CheckReset
VAR
	in1 : ARRAY [0..1] OF REAL := [0.1,2.3];
	in2 : ARRAY [0..1] OF REAL := [1.2,3.4];
	in3 : ARRAY [0..1] OF REAL := [2.3,4.5];
	out : ARRAY [0..1] OF REAL;
	expected : ARRAY [0..1] OF REAL := [2.3,4.5];
	stack : Stack;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckReset');

stack.Push(in1);
stack.Push(in2);
stack.Push(in3);

enumerator := stack.GetEnumerator();

enumerator.MoveNext();
enumerator.MoveNext();
enumerator.Reset();
enumerator.MoveNext();
enumerator.TryGet(out);

enumerator.Dispose();

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryGet" Id="{950e4ad1-7c4a-0a92-3662-de954a76fd6f}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryGet
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	stack : Stack;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryGet');

stack.Push(in);
enumerator := stack.GetEnumerator();
enumerator.MoveNext();

result := enumerator.TryGet(out);
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckTryGetTo" Id="{6012af2f-2311-022f-2dde-cca1b749b4af}">
      <Declaration><![CDATA[METHOD PUBLIC CheckTryGetTo
VAR
	in : INT := 123;
	out : INT;
	expected : INT := 123;
	result : BOOL;
	stack : Stack;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckTryGetTo');

stack.Push(in);
enumerator := stack.GetEnumerator();
enumerator.MoveNext();

result := enumerator.TryGetTo(ADR(out),SIZEOF(out));
enumerator.Dispose();

AssertTrue(
	Condition := result,
	Message := 'Method returned false'
);

AssertEquals(
	Expected := expected,
	Actual := out,
	Message := 'Did not produce the expected result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithArrays" Id="{30d9e838-2547-0638-3e77-7a91cc810f18}">
      <Declaration><![CDATA[METHOD PUBLIC CheckWorksWithArrays
VAR
	in1 : ARRAY [0..1] OF REAL := [0.1,2.3];
	in2 : ARRAY [0..1] OF REAL := [1.2,3.4];
	in3 : ARRAY [0..1] OF REAL := [2.3,4.5];
	out1 : ARRAY [0..1] OF REAL;
	out2 : ARRAY [0..1] OF REAL;
	out3 : ARRAY [0..1] OF REAL;
	expected1 : ARRAY [0..1] OF REAL := [2.3,4.5];
	expected2 : ARRAY [0..1] OF REAL := [1.2,3.4];
	expected3 : ARRAY [0..1] OF REAL := [0.1,2.3];
	stack : Stack;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithArrays');

stack.Push(in1);
stack.Push(in2);
stack.Push(in3);

enumerator := stack.GetEnumerator();

enumerator.MoveNext();
enumerator.TryGet(out1);
enumerator.MoveNext();
enumerator.TryGet(out2);
enumerator.MoveNext();
enumerator.TryGet(out3);

enumerator.Dispose();

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected 1st result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected 2nd result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected 3rd result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithIntegers" Id="{f7dee7d0-9a1c-0115-1ac6-1a185e87ca10}">
      <Declaration><![CDATA[METHOD PUBLIC CheckWorksWithIntegers
VAR
	in1 : INT := 123;
	in2 : INT := 234;
	in3 : INT := 345;
	out1 : INT;
	out2 : INT;
	out3 : INT;
	expected1 : INT := 345;
	expected2 : INT := 234;
	expected3 : INT := 123;
	stack : Stack;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithIntegers');

stack.Push(in1);
stack.Push(in2);
stack.Push(in3);

enumerator := stack.GetEnumerator();

enumerator.MoveNext();
enumerator.TryGet(out1);
enumerator.MoveNext();
enumerator.TryGet(out2);
enumerator.MoveNext();
enumerator.TryGet(out3);

enumerator.Dispose();

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected 1st result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected 2nd result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected 3rd result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckWorksWithStrings" Id="{e628e6bb-4c64-0541-38af-93e042fc9ca8}">
      <Declaration><![CDATA[METHOD PUBLIC CheckWorksWithStrings
VAR
	in1 : STRING := 'test1';
	in2 : STRING := 'test2';
	in3 : STRING := 'test3';
	out1 : STRING;
	out2 : STRING;
	out3 : STRING;
	expected1 : STRING := 'test3';
	expected2 : STRING := 'test2';
	expected3 : STRING := 'test1';
	stack : Stack;
	enumerator : I_ForwardEnumerator;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('CheckWorksWithStrings');

stack.Push(in1);
stack.Push(in2);
stack.Push(in3);

enumerator := stack.GetEnumerator();

enumerator.MoveNext();
enumerator.TryGet(out1);
enumerator.MoveNext();
enumerator.TryGet(out2);
enumerator.MoveNext();
enumerator.TryGet(out3);

enumerator.Dispose();

AssertEquals(
	Expected := expected1,
	Actual := out1,
	Message := 'Did not produce the expected 1st result'
);

AssertEquals(
	Expected := expected2,
	Actual := out2,
	Message := 'Did not produce the expected 2nd result'
);

AssertEquals(
	Expected := expected3,
	Actual := out3,
	Message := 'Did not produce the expected 3rd result'
);

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>