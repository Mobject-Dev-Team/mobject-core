<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_LREAL_TestSuite" Id="{a9f6f08d-8fb8-0077-0579-8b948ddb3a6c}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _LREAL_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestIsFloat();
TestIsSigned();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{8671cae9-038d-0216-213e-6a8ec1b2d8aa}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _LREAL(0.0);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{760a15cc-e2cf-0d5a-2b13-4636178b46e6}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _LREAL(0.0);
	target : LREAL := 0.0;
    expected : LREAL := 0.0;
    actual : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := 123.4;

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Value incorrectly followed target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{eef07268-c288-077c-3c72-e999e14c1ec0}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _LREAL(123.4);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsFloat" Id="{a2e59064-4e86-4458-b3c0-5d9c446ee9bf}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsFloat
VAR
    _type : _LREAL(0);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsFloat');

AssertTrue(
	Condition := _type.IsFloat,
    Message := 'Type did not correctly identify itself as being unsigned'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsSigned" Id="{6cf1c265-5222-0cdb-369e-96acc1b01028}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsSigned
VAR
    _type : _LREAL(0);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsSigned');

AssertTrue(
	Condition := _type.IsSigned,
    Message := 'Type did not correctly identify itself as being signed'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{f7dc3f0d-f1fb-0f03-3fa5-52394b362fc0}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _LREAL(0.0);
	target : LREAL := 0.0;
    expected : LREAL := 123.4;
    actual : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := 123.4;

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{2deb2722-ba4e-0be2-1ccd-04269ad94b18}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _LREAL(0.0);
	target : LREAL := 0.0;
    expected : LREAL := 123.4;
    actual : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := 123.4;

actual := target;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{40e9f284-fa52-0ce3-06fd-c871cf04ea1b}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _LREAL(0.0);
    serializer : JsonSerializer;
    expected : STRING(500) := '{"typeName":"LREAL","minValue":-1.7976931348623157e308,"maxValue":1.7976931348623157e308,"isSigned":true,"isFloat":true}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{c28687c7-fb67-04ab-32db-128dde7870ec}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _LREAL(123.4);
    serializer : JsonSerializer;
    expected : STRING := '123.4';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{b1ecf112-3e40-019f-11ee-6ca7b7c1d6ca}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _LREAL(0.0);
    expected : UDINT := SIZEOF(LREAL);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{b6866bfa-f9d4-07f2-121a-7a80dd7484be}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '123.4';
    _type : _LREAL(0.0);
    expected : LREAL := 123.4;
    actual : LREAL;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{39626a1c-b2de-07b4-14c1-53fbcfc78c60}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _LREAL(0.0);
	target : _LREAL(0.0);
    expected : LREAL := 123.4;
    actual : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := 123.4;

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{4351ea4d-d139-0bd8-1aa2-9e9747ba647b}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _LREAL(0.0);
	target : _LREAL(0.0);
    expected : LREAL := 123.4;
    actual : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := 123.4;

actual := target.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{30ff9707-1ca0-0e8e-20ed-7f705210cd2e}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _LREAL(0.0);
    expected : STRING := 'LREAL';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{f027f7b3-8f3b-0c84-04d7-416a8ef1fd35}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _LREAL(0.0);
    expected : LREAL := 123.4;
    actual : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := 123.4;

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{37d0bd09-89b2-02bb-2077-abfbbadb0212}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _LREAL(123.4);
    expected : LREAL := 123.4;
    actual : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals_LREAL(
    Expected := expected,
    Actual := actual,
    Delta := LREAL#0.001,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>