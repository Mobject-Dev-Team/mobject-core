<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.13">
  <POU Name="_BYTE_TestSuite" Id="{87d75d7c-a5bb-0c5e-3b98-6e26f98673fb}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _BYTE_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestIsFloat();
TestIsSigned();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{2bced416-0090-0e2c-26d6-cfbd8d7a7ab9}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _BYTE(0);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{9cc46697-8fab-080c-3fbd-4433a61fad1a}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _BYTE(0);
	target : BYTE := 0;
    expected : BYTE := 0;
    actual : BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := 123;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value incorrectly followed target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{cf30baa8-1a00-0df9-3e03-d5e68866a299}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _BYTE(123);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsEvenReturnsFalse" Id="{a99acaab-1562-0024-1654-1bcadb82e93e}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsEvenReturnsFalse
VAR
    _type : _BYTE(1);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsEvenReturnsFalse');

AssertFalse(
	Condition := _type.IsEven,
    Message := 'Type incorrectly identified as being even'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsEvenReturnsTrue" Id="{463a1c76-acf4-0f45-1de2-f46da82467a4}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsEvenReturnsTrue
VAR
    _type : _BYTE(2);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsEvenReturnsTrue');

AssertTrue(
	Condition := _type.IsOdd,
    Message := 'Type did not correctly identify itself as being even'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsFloat" Id="{8a62e45b-da06-48cf-926c-278f508c2836}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsFloat
VAR
    _type : _BYTE(0);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsFloat');

AssertFalse(
	Condition := _type.IsFloat,
    Message := 'Type did not correctly identify itself as being unsigned'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsOddReturnsFalse" Id="{ec1e51c4-0be6-0397-0d5d-052c7b47f12b}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsOddReturnsFalse
VAR
    _type : _BYTE(2);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsOddReturnsFalse');

AssertFalse(
	Condition := _type.IsOdd,
    Message := 'Type incorrectly identified as being odd'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsOddReturnsTrue" Id="{c7c56f35-4aa7-0d3c-2606-b7883e082378}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsOddReturnsTrue
VAR
    _type : _BYTE(1);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsOddReturnsTrue');

AssertTrue(
	Condition := _type.IsOdd,
    Message := 'Type did not correctly identify itself as being odd'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsSigned" Id="{f01b6863-7df0-0897-0265-49482607efed}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsSigned
VAR
    _type : _BYTE(0);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsSigned');

AssertFalse(
	Condition := _type.IsSigned,
    Message := 'Type did not correctly identify itself as being unsigned'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{7dc27e9c-9240-02c4-35ff-d590c43d1ffe}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _BYTE(0);
	target : BYTE := 0;
    expected : BYTE := 123;
    actual : BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := 123;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{31673289-cae7-0044-2595-1d750e392e5b}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _BYTE(0);
	target : BYTE := 0;
    expected : BYTE := 123;
    actual : BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := 123;

actual := target;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{c27d3802-2dc0-0424-02b3-6c293786e710}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _BYTE(0);
    serializer : JsonSerializer;
    expected : STRING(500) := '{"typeName":"BYTE","minValue":0,"maxValue":255,"isSigned":false,"isFloat":false}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{558dabb6-d958-038e-3781-97e018c0c46a}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _BYTE(123);
    serializer : JsonSerializer;
    expected : STRING := '123';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{23a2140a-ff39-06ce-114f-5078e95d87cf}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _BYTE(0);
    expected : UDINT := SIZEOF(BYTE);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{dc3f3970-994e-0a8b-0bdb-0743670244e1}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '123';
    _type : _BYTE(0);
    expected : BYTE := 123;
    actual : BYTE;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{7d463d5c-284f-01ea-3334-fcd9ba607575}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _BYTE(0);
	target : _BYTE(0);
    expected : BYTE := 123;
    actual : BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := 123;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{8e23ab6c-eefa-000f-286e-a7cc6b0bf848}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _BYTE(0);
	target : _BYTE(0);
    expected : BYTE := 123;
    actual : BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := 123;

actual := target.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{43d3a85a-6971-08d9-0ceb-f7a71338bde6}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _BYTE(0);
    expected : STRING := 'BYTE';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{f0710e66-2a7c-0377-30f0-c1e0f2ae310e}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _BYTE(0);
    expected : BYTE := 123;
    actual : BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := 123;

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{da31865c-bc70-017d-00d1-5deacb09ea3e}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _BYTE(123);
    expected : BYTE := 123;
    actual : BYTE;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals(
    Expected := expected,
    Actual := actual,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>