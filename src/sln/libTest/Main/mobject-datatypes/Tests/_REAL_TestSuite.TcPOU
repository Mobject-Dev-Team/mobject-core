<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="_REAL_TestSuite" Id="{847bc499-018b-0b2f-0213-b03219cc49b6}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK _REAL_TestSuite EXTENDS TcUnit.FB_TestSuite
VAR
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[TestAddress();
TestClearReference();
TestClone();
TestTypeNameReturnsExpected();
TestIsFloat();
TestIsSigned();
TestMakeReferenceToFollowsReference();
TestMakeReferenceToUpdatesReference();
TestSize();
TestValueReturnsExpectedAfterInit();
TestValueReturnsExpectedAfterChange();
TestSerializeTypeWith();
TestSerializeWith();
TestTryDeserializeFrom();
TestTryMakeReferenceToFollowsReference();
TestTryMakeReferenceToUpdatesReference();
]]></ST>
    </Implementation>
    <Method Name="TestAddress" Id="{d7fe934c-4bfb-09eb-3e1b-1b5942cdc1d2}">
      <Declaration><![CDATA[METHOD PUBLIC TestAddress
VAR
    _type : _REAL(0.0);
    notExpected : PVOID := 0;
    actual : PVOID;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestAddress');

actual := _type.Address;

AssertFalse(
    Condition := (notExpected = actual),
    Message := 'Type did not return a valid address.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClearReference" Id="{4826622c-86b9-016e-0a21-deee545ff168}">
      <Declaration><![CDATA[METHOD PUBLIC TestClearReference
VAR
    _type : _REAL(0.0);
	target : REAL := 0.0;
    expected : REAL := 0.0;
    actual : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClearReference');

_type.MakeReferenceTo(target);
_type.ClearReference();
target := 123.4;

actual := _type.Value;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Value incorrectly followed target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestClone" Id="{b7d7075b-faf9-0426-3859-0ad47231159b}">
      <Declaration><![CDATA[METHOD PUBLIC TestClone
VAR
    _type : _REAL(123.4);
	clone : I_Datatype;
	isValidClone : BOOL;
	compareResult : DINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestClone');

clone := _type.Clone();

isValidClone := clone <> 0;

IF isValidClone THEN
	compareResult := memcmp(_type.Address, clone.Address, clone.Size);
END_IF

AssertTrue(
	Condition := isValidClone,
	Message := 'Clone did not produce a clone'
);

AssertEquals_DINT(
	Expected := 0,
    Actual := compareResult,
    Message := 'Clone did not return a valid clone.'
);

clone.Dispose();

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsFloat" Id="{e3474c2c-a0d0-4c41-819c-0aa108f966ea}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsFloat
VAR
    _type : _REAL(0);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsFloat');

AssertTrue(
	Condition := _type.IsFloat,
    Message := 'Type did not correctly identify itself as being unsigned'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestIsSigned" Id="{d91d6f79-2dd6-0d7b-0660-6797d434c00e}">
      <Declaration><![CDATA[METHOD PUBLIC TestIsSigned
VAR
    _type : _REAL(0);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestIsSigned');

AssertTrue(
	Condition := _type.IsSigned,
    Message := 'Type did not correctly identify itself as being signed'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToFollowsReference" Id="{0a5e81b3-9a16-0869-3c5a-bdc0c9dc1425}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToFollowsReference
VAR
    _type : _REAL(0.0);
	target : REAL := 0.0;
    expected : REAL := 123.4;
    actual : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToFollowsReference');

_type.MakeReferenceTo(target);
target := 123.4;

actual := _type.Value;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestMakeReferenceToUpdatesReference" Id="{bb492115-804d-0983-1c8c-3e620163a391}">
      <Declaration><![CDATA[METHOD PUBLIC TestMakeReferenceToUpdatesReference
VAR
    _type : _REAL(0.0);
	target : REAL := 0.0;
    expected : REAL := 123.4;
    actual : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestMakeReferenceToUpdatesReference');

_type.MakeReferenceTo(target);
_type.Value := 123.4;

actual := target;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeTypeWith" Id="{37637d28-225a-015b-1706-85ee6698fb1d}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeTypeWith
VAR
    _type : _REAL(0.0);
    serializer : JsonSerializer;
    expected : STRING(500) := '{"typeName":"REAL","minValue":-3.4028230607370967e38,"maxValue":3.4028230607370967e38,"isSigned":true,"isFloat":true}';
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeTypeWith');

serializer.Reset();
_type.SerializeTypeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSerializeWith" Id="{4d6d3965-c610-09ec-3ae7-08072e0acb48}">
      <Declaration><![CDATA[METHOD PUBLIC TestSerializeWith
VAR
    _type : _REAL(123.4);
    serializer : JsonSerializer;
    expected : STRING := '123.4000015258789'; // Expected value due to the nature of floating point values defined by IEEE754.
    actual : STRING(500);
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSerializeWith');

serializer.Reset();
_type.SerializeWith(serializer);
serializer.TryGetSerializedData(ADR(actual), SIZEOF(actual));

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Serialization of type data did not return correct string.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestSize" Id="{68ce3867-23dc-0d0b-3dfe-7d3cb42ff92a}">
      <Declaration><![CDATA[METHOD PUBLIC TestSize
VAR
    _type : _REAL(0.0);
    expected : UDINT := SIZEOF(REAL);
    actual : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestSize');

actual := _type.Size;

AssertEquals_UDINT(
    Expected := Expected,
    Actual := actual,
    Message := 'Type did not return the correct size.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryDeserializeFrom" Id="{b7041c1d-0af5-0222-0727-8e12a0164174}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryDeserializeFrom
VAR
    deserializer : JsonDeserializer;
    feedback : DeserializerFeedback;
    json : STRING := '123.4';
    _type : _REAL(0.0);
    expected : REAL := 123.4;
    actual : REAL;
 END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryDeserializeFrom');

deserializer.Reset();
deserializer.TryLoad(json);
_type.TryDeserializeFrom(Deserializer, Feedback);

actual := _type.Value;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Type did not deserialize correctly.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToFollowsReference" Id="{79138e1b-51e2-06f4-3415-fdc1e479f074}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToFollowsReference
VAR
    _type : _REAL(0.0);
	target : _REAL(0.0);
    expected : REAL := 123.4;
    actual : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToFollowsReference');

_type.TryMakeReferenceTo(target);
target.Value := 123.4;

actual := _type.Value;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Value did not follow target change'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTryMakeReferenceToUpdatesReference" Id="{1101718d-53a6-01f5-1396-63a76fc1a57d}">
      <Declaration><![CDATA[METHOD PUBLIC TestTryMakeReferenceToUpdatesReference
VAR
    _type : _REAL(0.0);
	target : _REAL(0.0);
    expected : REAL := 123.4;
    actual : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTryMakeReferenceToUpdatesReference');

_type.TryMakeReferenceTo(target);
_type.Value := 123.4;

actual := target.Value;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Value did not update target'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestTypeNameReturnsExpected" Id="{5d5e24eb-d067-0102-0fb6-6ba42b52e04b}">
      <Declaration><![CDATA[METHOD PUBLIC TestTypeNameReturnsExpected
VAR
    _type : _REAL(0.0);
    expected : STRING := 'REAL';
    actual : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestTypeNameReturnsExpected');

actual := _type.TypeName;

AssertEquals_STRING(
    Expected := expected,
    Actual := actual,
    Message := 'Type did not return correct iec type.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterChange" Id="{91cc9b19-d34f-09c6-0108-c45d3b4b4e85}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterChange
VAR
    _type : _REAL(0.0);
    expected : REAL := 123.4;
    actual : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterChange');

_type.Value := 123.4;

actual := _type.Value;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Expected value not returned after change.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
    <Method Name="TestValueReturnsExpectedAfterInit" Id="{f030fee8-8084-027b-3db8-c6544908cbef}">
      <Declaration><![CDATA[METHOD PUBLIC TestValueReturnsExpectedAfterInit
VAR
    _type : _REAL(123.4);
    expected : REAL := 123.4;
    actual : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TestValueReturnsExpectedAfterInit');

actual := _type.Value;

AssertEquals_REAL(
    Expected := expected,
    Actual := actual,
    Delta := REAL#0.001,
    Message := 'Expected value not returned after Init.'
);

TEST_FINISHED();
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>