<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MockDatatype_BOOL" Id="{6e9bb898-b266-4cb7-b09b-584e678b212b}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'linkalways'} 
{attribute 'no_explicit_call' := 'This FB is a CLASS and must be accessed using methods or properties'}
{attribute 'enable_dynamic_creation'}
FUNCTION_BLOCK MockDatatype_BOOL EXTENDS DatatypeBase
VAR
	localData : BOOL;
	activeData : REFERENCE TO BOOL REF= localData;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="Constructor" Id="{c62f552d-8672-4a00-9970-e5cf6174832d}" />
    <Property Name="Address" Id="{fd3ab8ff-8587-4dcd-9b8a-0ba716e97a95}">
      <Declaration><![CDATA[PROPERTY PUBLIC Address : PVOID]]></Declaration>
      <Get Name="Get" Id="{bdf8e2df-6be4-494e-8d64-e2a70b4e8f77}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Address := ADR(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="ClearReference" Id="{cac4155d-2efa-4147-88de-7579ba0b7a6d}">
      <Declaration><![CDATA[METHOD PUBLIC ClearReference
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= localData;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Clone" Id="{47fa05e7-d92d-4816-9fb4-9b07d464fd08}">
      <Declaration><![CDATA[METHOD PUBLIC Clone : I_Datatype
VAR
    pClone : POINTER TO MockDatatype_BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[pClone := __NEW(MockDatatype_BOOL(InitialValue := Value));
Clone := pClone^;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{0dc2a9a0-5df8-49fc-84d3-cea676dbab70}" FolderPath="Constructor\">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	InitialValue : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[localData := InitialValue;]]></ST>
      </Implementation>
    </Method>
    <Method Name="MakeReferenceTo" Id="{ba6c3aa3-bcbc-471a-a97b-4c454a5168a5}">
      <Declaration><![CDATA[METHOD PUBLIC MakeReferenceTo
VAR_INPUT
	ReferenceTarget : REFERENCE TO BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[activeData REF= ReferenceTarget;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SerializeWith" Id="{ad739cf4-527b-4b86-99df-6b76a06eb779}">
      <Declaration><![CDATA[METHOD PUBLIC SerializeWith
VAR_INPUT
	Serializer : I_Serializer;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Serializer.AddBool(activeData);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Size" Id="{ebf129b8-f210-4c18-a444-7c8ec041f687}">
      <Declaration><![CDATA[PROPERTY PUBLIC Size : UDINT]]></Declaration>
      <Get Name="Get" Id="{3763b7bb-36cf-4404-9e79-8877c34e5cf8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Size := SIZEOF(activeData);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="TryDeserializeFrom" Id="{1f44450d-64ca-4154-ae26-8663af22724a}">
      <Declaration><![CDATA[METHOD TryDeserializeFrom : BOOL
VAR_INPUT
	Deserializer : I_Deserializer;
	Feedback : I_DeserializerFeedback;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TryDeserializeFrom := Deserializer.TryGetBool(activeData, Feedback);]]></ST>
      </Implementation>
    </Method>
    <Method Name="TryMakeReferenceTo" Id="{7e1e4fa1-844a-44ee-bfd5-e1825603c4f8}">
      <Declaration><![CDATA[METHOD TryMakeReferenceTo : BOOL
VAR_INPUT
	Target : I_Datatype;
END_VAR
VAR
	pTargetData : POINTER TO BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT IsEquivalentTo(Target) THEN
	RETURN;
END_IF

pTargetData := Target.Address;
activeData REF= pTargetData^;
TryMakeReferenceTo := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="TypeName" Id="{5d72957c-7dba-4be9-b302-10913bd0dd40}">
      <Declaration><![CDATA[PROPERTY PUBLIC TypeName : T_MAXSTRING]]></Declaration>
      <Get Name="Get" Id="{45f674d8-dacd-43b8-a3ca-150bb65a9216}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[TypeName := 'BOOL';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="Value" Id="{2ac61bff-7911-4764-8eac-4c865e6f7bf3}">
      <Declaration><![CDATA[PROPERTY PUBLIC Value : REFERENCE TO BOOL]]></Declaration>
      <Get Name="Get" Id="{481b3e2b-5498-42e2-b9c6-d20f2c810b4a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Value REF= activeData;]]></ST>
        </Implementation>
      </Get>
    </Property>
  </POU>
</TcPlcObject>